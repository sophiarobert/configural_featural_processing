<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2020.2.4">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': '', 'design': '1', 'position': '2'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="[]" valType="fileList"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1792, 1120]" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="configural_featural" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="debug" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="screen_scale">
      <CodeComponent name="code_JS">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="thisExp=psychoJS.experiment;&amp;#10;win=psychoJS.window;&amp;#10;event=psychoJS.eventManager;&amp;#10;Array.prototype.append = [].push;&amp;#10;shuffle = util.shuffle;&amp;#10;webbrowser=window;&amp;#10;&amp;#10;random=Math.random;&amp;#10;randint=function(min, maxplusone) {&amp;#10;    return Math.floor(Math.random() * (maxplusone - min) ) + min;&amp;#10;}&amp;#10;&amp;#10;round = function(num, n=0) {    &amp;#10;    return +(Math.round(num + (&quot;e+&quot; + n))  + (&quot;e-&quot; + n));&amp;#10;}&amp;#10;&amp;#10;function shuffle_array(array) {&amp;#10;    for (let i = array.length - 1; i &gt; 0; i--) {&amp;#10;        let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i&amp;#10;&amp;#10;            // swap elements array[i] and array[j]&amp;#10;            // we use &quot;destructuring assignment&quot; syntax to achieve that&amp;#10;            // you'll find more details about that syntax in later chapters&amp;#10;            // same can be written as:&amp;#10;            // let t = array[i]; array[i] = array[j]; array[j] = t&amp;#10;        [array[i], array[j]] = [array[j], array[i]];&amp;#10;    }&amp;#10;    return array&amp;#10;}&amp;#10;&amp;#10;function divide_subPoint1(array, divisor) {&amp;#10;    let array_divided = array.map(function(element) {&amp;#10;        return element/divisor - 0.1;&amp;#10;    });&amp;#10;    return array_divided&amp;#10;}&amp;#10;&amp;#10;function round_array(array) {&amp;#10;    array = array.map(function(each_element){&amp;#10;        return Math.round(each_element);&amp;#10;    }); &amp;#10;    return array&amp;#10;}&amp;#10;&amp;#10;psychoJS.downloadResources([{name: (&quot;Stimuli/greenCheck.png&quot;), path:(&quot;Stimuli/greenCheck.png&quot;)},&amp;#10;{name: (&quot;Stimuli/redWrong.png&quot;), path:(&quot;Stimuli/redWrong.png&quot;)},&amp;#10;{name: (&quot;Stimuli/edmd.png&quot;), path:(&quot;Stimuli/edmd.png&quot;)},&amp;#10;{name: (&quot;Stimuli/eimd.png&quot;), path:(&quot;Stimuli/eimd.png&quot;)},&amp;#10;{name: (&quot;Stimuli/eomu.png&quot;), path:(&quot;Stimuli/eomu.png&quot;)},&amp;#10;{name: (&quot;Stimuli/eumu.png&quot;), path:(&quot;Stimuli/eumu.png&quot;)},&amp;#10;{name: (&quot;Stimuli/f15.png&quot;), path:(&quot;Stimuli/f15.png&quot;)},&amp;#10;{name: (&quot;Stimuli/f24.png&quot;), path:(&quot;Stimuli/f24.png&quot;)},&amp;#10;{name: (&quot;Stimuli/f131.png&quot;), path:(&quot;Stimuli/f131.png&quot;)},&amp;#10;{name: (&quot;Stimuli/f142.png&quot;), path:(&quot;Stimuli/f142.png&quot;)},&amp;#10;{name: (&quot;Stimuli/H-8sim0.png&quot;), path:(&quot;Stimuli/H-8sim0.png&quot;)},&amp;#10;{name: (&quot;Stimuli/H-8sim1.png&quot;), path:(&quot;Stimuli/H-8sim1.png&quot;)},&amp;#10;{name: (&quot;Stimuli/H-8sim2.png&quot;), path:(&quot;Stimuli/H-8sim2.png&quot;)},&amp;#10;{name: (&quot;Stimuli/H-8sim3.png&quot;), path:(&quot;Stimuli/H-8sim3.png&quot;)},&amp;#10;{name: (&quot;Stimuli/H5sim0.png&quot;), path:(&quot;Stimuli/H5sim0.png&quot;)},&amp;#10;{name: (&quot;Stimuli/H6sim0.png&quot;), path:(&quot;Stimuli/H6sim0.png&quot;)},&amp;#10;{name: (&quot;Stimuli/H7sim0.png&quot;), path:(&quot;Stimuli/H7sim0.png&quot;)},&amp;#10;{name: (&quot;Stimuli/H8sim0.png&quot;), path:(&quot;Stimuli/H8sim0.png&quot;)},&amp;#10;{name: (&quot;Stimuli/dory1.png&quot;), path:(&quot;Stimuli/dory1.png&quot;)},&amp;#10;{name: (&quot;Stimuli/dory2.png&quot;), path:(&quot;Stimuli/dory2.png&quot;)},&amp;#10;{name: (&quot;Stimuli/nemo1.jpg&quot;), path:(&quot;Stimuli/nemo1.jpg&quot;)},&amp;#10;{name: (&quot;Stimuli/nemo2.png&quot;), path:(&quot;Stimuli/nemo2.png&quot;)},&amp;#10;{name: (&quot;Designs/design1.csv&quot;), path:(&quot;Designs/design1.csv&quot;)},&amp;#10;{name: (&quot;Designs/design2.csv&quot;), path:(&quot;Designs/design2.csv&quot;)},&amp;#10;{name: (&quot;Designs/design3.csv&quot;), path:(&quot;Designs/design3.csv&quot;)},&amp;#10;{name: (&quot;Designs/design4.csv&quot;), path:(&quot;Designs/design4.csv&quot;)},&amp;#10;{name: (&quot;Designs/design5.csv&quot;), path:(&quot;Designs/design5.csv&quot;)},&amp;#10;{name: (&quot;Designs/design6.csv&quot;), path:(&quot;Designs/design6.csv&quot;)},&amp;#10;{name: (&quot;Designs/design7.csv&quot;), path:(&quot;Designs/design7.csv&quot;)},&amp;#10;{name: (&quot;Designs/design8.csv&quot;), path:(&quot;Designs/design8.csv&quot;)},&amp;#10;{name: (&quot;Designs/instructions_face_1234.png&quot;), path:(&quot;Designs/instructions_face_1234.png&quot;)},&amp;#10;{name: (&quot;Designs/instructions_face_5678.png&quot;), path:(&quot;Designs/instructions_face_5678.png&quot;)},&amp;#10;{name: (&quot;Designs/instructions_haus_1234.png&quot;), path:(&quot;Designs/instructions_haus_1234.png&quot;)},&amp;#10;{name: (&quot;Designs/instructions_haus_5678.png&quot;), path:(&quot;Designs/instructions_haus_5678.png&quot;)},&amp;#10;{name: (&quot;Designs/prac_instr1.png&quot;), path:(&quot;Designs/prac_instr1.png&quot;)},&amp;#10;{name: (&quot;Designs/prac_instr2_1234.png&quot;), path:(&quot;Designs/prac_instr2_1234.png&quot;)},&amp;#10;{name: (&quot;Designs/prac_instr2_5678.png&quot;), path:(&quot;Designs/prac_instr2_5678.png&quot;)},&amp;#10;{name: (&quot;Designs/prac_instr3_corr.png&quot;), path:(&quot;Designs/prac_instr3_corr.png&quot;)},&amp;#10;{name: (&quot;Designs/prac_instr3_wrong.png&quot;), path:(&quot;Designs/prac_instr3_wrong.png&quot;)},&amp;#10;{name: (&quot;Designs/prac_instr4_1234.png&quot;), path:(&quot;Designs/prac_instr4_1234.png&quot;)},&amp;#10;{name: (&quot;Designs/prac_instr4_5678.png&quot;), path:(&quot;Designs/prac_instr4_5678.png&quot;)},&amp;#10;{name: (&quot;Designs/prac_instr5_1234_corr.png&quot;), path:(&quot;Designs/prac_instr5_1234_corr.png&quot;)},&amp;#10;{name: (&quot;Designs/prac_instr5_5678_corr.png&quot;), path:(&quot;Designs/prac_instr5_5678_corr.png&quot;)},&amp;#10;{name: (&quot;Designs/prac_instr5_1234_wrong.png&quot;), path:(&quot;Designs/prac_instr5_1234_wrong.png&quot;)},&amp;#10;{name: (&quot;Designs/prac_instr5_5678_wrong.png&quot;), path:(&quot;Designs/prac_instr5_5678_wrong.png&quot;)}]);&amp;#10;&amp;#10;expInfo['OS'] = window.navigator.platform;&amp;#10;expInfo['xResolution'] = screen.width;&amp;#10;expInfo['yResolution'] = screen.height;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_JS" valType="code"/>
      </CodeComponent>
      <CodeComponent name="code_Py">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="from numpy.random import permutation&amp;#10;from numpy.random import shuffle&amp;#10;&amp;#10;expInfo['winSize'] = win.size;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_Py" valType="code"/>
      </CodeComponent>
      <CodeComponent name="code_1">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="oldt=0&amp;#10;x_size=8.560&amp;#10;y_size=5.398&amp;#10;screen_height=0&amp;#10;&amp;#10;if win.units=='norm':&amp;#10;    x_scale=.05&amp;#10;    y_scale=.1&amp;#10;    dbase = .0001&amp;#10;    unittext=' norm units'&amp;#10;    vsize=2&amp;#10;elif win.units=='pix':&amp;#10;    x_scale=60&amp;#10;    y_scale=40&amp;#10;    dbase = .1&amp;#10;    unittext=' pixels'&amp;#10;    vsize=win.size[1]&amp;#10;else:&amp;#10;    x_scale=.05&amp;#10;    y_scale=.05&amp;#10;    dbase = .0001&amp;#10;    unittext=' height units'&amp;#10;    vsize=1&amp;#10;&amp;#10;# h = tan(degrees = 2) x (distance = 49.53)&amp;#10;height =  1.7296*2&amp;#10;#width = 1.7296*2&amp;#10;#width3deg = 2.5958&amp;#10;width = 3.47618705978&amp;#10;width4deg = 3.47618705978" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="oldt = 0;&amp;#10;x_size = 8.56;&amp;#10;y_size = 5.398;&amp;#10;screen_height = 0;&amp;#10;if ((win.units === &quot;norm&quot;)) {&amp;#10;    x_scale = 0.05;&amp;#10;    y_scale = 0.1;&amp;#10;    dbase = 0.0001;&amp;#10;    unittext = &quot; norm units&quot;;&amp;#10;    vsize = 2;&amp;#10;} else {&amp;#10;    if ((win.units === &quot;pix&quot;)) {&amp;#10;        x_scale = 60;&amp;#10;        y_scale = 40;&amp;#10;        dbase = 0.1;&amp;#10;        unittext = &quot; pixels&quot;;&amp;#10;        vsize = win.size[1];&amp;#10;    } else {&amp;#10;        x_scale = 0.05;&amp;#10;        y_scale = 0.05;&amp;#10;        dbase = 0.0001;&amp;#10;        unittext = &quot; height units&quot;;&amp;#10;        vsize = 1;&amp;#10;    }&amp;#10;}&amp;#10;height = (1.7296 * 2);&amp;#10;width = 3.47618705978;&amp;#10;width4deg = 3.47618705978;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys=event.getKeys()&amp;#10;&amp;#10;if len(keys):&amp;#10;    if t-oldt&lt;.5:&amp;#10;        dscale=5*dbase&amp;#10;        oldt=t&amp;#10;    else:&amp;#10;        dscale=dbase&amp;#10;        oldt=t&amp;#10;    if 'space' in keys:&amp;#10;        continueRoutine=False&amp;#10;    elif 'up' in keys:&amp;#10;        y_scale=round((y_scale+dscale)*10000)/10000&amp;#10;    elif 'down' in keys:&amp;#10;        y_scale=round((y_scale-dscale)*10000)/10000&amp;#10;    elif 'left' in keys:&amp;#10;        x_scale=round((x_scale-dscale)*10000)/10000&amp;#10;    elif 'right' in keys:&amp;#10;        x_scale=round((x_scale+dscale)*10000)/10000&amp;#10;    screen_height=round(vsize*10/y_scale)/10&amp;#10;    ccimage.size=[x_size*x_scale, y_size*y_scale]&amp;#10;    " valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (((t - oldt) &lt; 0.5)) {&amp;#10;        dscale = (5 * dbase);&amp;#10;        oldt = t;&amp;#10;    } else {&amp;#10;        dscale = dbase;&amp;#10;        oldt = t;&amp;#10;    }&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;up&quot;, keys)) {&amp;#10;            y_scale = (round(((y_scale + dscale) * 10000)) / 10000);&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;down&quot;, keys)) {&amp;#10;                y_scale = (round(((y_scale - dscale) * 10000)) / 10000);&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;left&quot;, keys)) {&amp;#10;                    x_scale = (round(((x_scale - dscale) * 10000)) / 10000);&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;right&quot;, keys)) {&amp;#10;                        x_scale = (round(((x_scale + dscale) * 10000)) / 10000);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    screen_height = (round(((vsize * 10) / y_scale)) / 10);&amp;#10;    ccimage.size = [(x_size * x_scale), (y_size * y_scale)];&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="thisExp.addData(&quot;X Scale&quot;, x_scale);&amp;#10;thisExp.addData(&quot;Y Scale&quot;, y_scale);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="thisExp.addData('X Scale',x_scale)&amp;#10;thisExp.addData('Y Scale',y_scale)&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_1" valType="code"/>
      </CodeComponent>
      <TextComponent name="text_top">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_top" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0.3)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Resize this image to match the size of a credit card with arrow keys" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="text_bottom">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_bottom" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -0.3)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Press Space when you’re finished" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <ImageComponent name="ccimage">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="bankcard.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="ccimage" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="constant" val="$(x_size*x_scale, y_size*y_scale)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
    </Routine>
    <Routine name="target_img">
      <CodeComponent name="code_4">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="img_pair = 0;&amp;#10;target = 0;&amp;#10;probe = 0;&amp;#10;corr = 0;&amp;#10;trialID = (trialID + 1);&amp;#10;if ((Number.parseInt(expInfo[&quot;position&quot;]) === 0)) {&amp;#10;    xPosition = 0;&amp;#10;} else {&amp;#10;    if ((Number.parseInt(expInfo[&quot;position&quot;]) === 2)) {&amp;#10;        if ((trial_order[trialID] === 1)) {&amp;#10;            sameTrialid += 1;&amp;#10;            if ((side_same === 1)) {&amp;#10;                xPosition = (- (width4deg * x_scale));&amp;#10;                sameTrial_left_id += 1;&amp;#10;                target = paths[trialSame_left[sameTrial_left_id]];&amp;#10;                probe = paths[trialSame_left[sameTrial_left_id]];&amp;#10;                if ((Number.parseInt(expInfo[&quot;design&quot;]) &lt; 5)) {&amp;#10;                    corr = &quot;f&quot;;&amp;#10;                } else {&amp;#10;                    if ((Number.parseInt(expInfo[&quot;design&quot;]) &gt; 4)) {&amp;#10;                        corr = &quot;j&quot;;&amp;#10;                    }&amp;#10;                }&amp;#10;            } else {&amp;#10;                if ((side_same === 0)) {&amp;#10;                    xPosition = (width4deg * x_scale);&amp;#10;                    sameTrial_right_id += 1;&amp;#10;                    target = paths[trialSame_right[sameTrial_right_id]];&amp;#10;                    probe = paths[trialSame_right[sameTrial_right_id]];&amp;#10;                    if ((Number.parseInt(expInfo[&quot;design&quot;]) &lt; 5)) {&amp;#10;                        corr = &quot;f&quot;;&amp;#10;                    } else {&amp;#10;                        if ((Number.parseInt(expInfo[&quot;design&quot;]) &gt; 4)) {&amp;#10;                            corr = &quot;j&quot;;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        } else {&amp;#10;            if ((trial_order[trialID] === 0)) {&amp;#10;                diffTrialid += 1;&amp;#10;                if ((side_diff === 1)) {&amp;#10;                    xPosition = (- (width4deg * x_scale));&amp;#10;                    diffTrial_left_id += 1;&amp;#10;                    console.log(diffTrial_left_id);&amp;#10;                    console.log(trialDiff_left[diffTrial_left]);&amp;#10;                    img_pair = trialDiff_left[diffTrial_left[diffTrial_left_id]];&amp;#10;                    target = paths[img_pair[0]];&amp;#10;                    probe = paths[img_pair[1]];&amp;#10;                    if ((Number.parseInt(expInfo[&quot;design&quot;]) &lt; 5)) {&amp;#10;                        corr = &quot;j&quot;;&amp;#10;                    } else {&amp;#10;                        if ((Number.parseInt(expInfo[&quot;design&quot;]) &gt; 4)) {&amp;#10;                            corr = &quot;f&quot;;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else {&amp;#10;                    if ((side_diff === 0)) {&amp;#10;                        xPosition = (width4deg * x_scale);&amp;#10;                        diffTrial_right_id += 1;&amp;#10;                        console.log(diffTrial_right_id);&amp;#10;                        console.log(trialDiff_right[diffTrial_right]);&amp;#10;                        img_pair = trialDiff_right[diffTrial_right[diffTrial_right_id]];&amp;#10;                        target = paths[img_pair[0]];&amp;#10;                        probe = paths[img_pair[1]];&amp;#10;                        if ((Number.parseInt(expInfo[&quot;design&quot;]) &lt; 5)) {&amp;#10;                            corr = &quot;j&quot;;&amp;#10;                        } else {&amp;#10;                            if ((Number.parseInt(expInfo[&quot;design&quot;]) &gt; 4)) {&amp;#10;                                corr = &quot;f&quot;;&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    } else {&amp;#10;        if ((Number.parseInt(expInfo[&quot;position&quot;]) === 1)) {&amp;#10;            xPosition = (- (width4deg * x_scale));&amp;#10;            if ((trial_order[trialID] === 1)) {&amp;#10;                sameTrialid += 1;&amp;#10;                target = paths[trialSame[sameTrialid]];&amp;#10;                probe = paths[trialSame[sameTrialid]];&amp;#10;                if ((Number.parseInt(expInfo[&quot;design&quot;]) &lt; 5)) {&amp;#10;                    corr = &quot;f&quot;;&amp;#10;                } else {&amp;#10;                    if ((Number.parseInt(expInfo[&quot;design&quot;]) &gt; 4)) {&amp;#10;                        corr = &quot;j&quot;;&amp;#10;                    }&amp;#10;                }&amp;#10;            } else {&amp;#10;                if ((trial_order[trialID] === 0)) {&amp;#10;                    diffTrialid += 1;&amp;#10;                    img_pair = trialDiff[diffTrial[diffTrialid]];&amp;#10;                    target = paths[img_pair[0]];&amp;#10;                    probe = paths[img_pair[1]];&amp;#10;                    if ((Number.parseInt(expInfo[&quot;design&quot;]) &lt; 5)) {&amp;#10;                        corr = &quot;j&quot;;&amp;#10;                    } else {&amp;#10;                        if ((Number.parseInt(expInfo[&quot;design&quot;]) &gt; 4)) {&amp;#10;                            corr = &quot;f&quot;;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        } else {&amp;#10;            if ((Number.parseInt(expInfo[&quot;position&quot;]) === 3)) {&amp;#10;                xPosition = (width4deg * x_scale);&amp;#10;                if ((trial_order[trialID] === 1)) {&amp;#10;                    sameTrialid += 1;&amp;#10;                    target = paths[trialSame[sameTrialid]];&amp;#10;                    probe = paths[trialSame[sameTrialid]];&amp;#10;                    if ((Number.parseInt(expInfo[&quot;design&quot;]) &lt; 5)) {&amp;#10;                        corr = &quot;f&quot;;&amp;#10;                    } else {&amp;#10;                        if ((Number.parseInt(expInfo[&quot;design&quot;]) &gt; 4)) {&amp;#10;                            corr = &quot;j&quot;;&amp;#10;                        }&amp;#10;                    }&amp;#10;                } else {&amp;#10;                    if ((trial_order[trialID] === 0)) {&amp;#10;                        diffTrialid += 1;&amp;#10;                        img_pair = trialDiff[diffTrial[diffTrialid]];&amp;#10;                        target = paths[img_pair[0]];&amp;#10;                        probe = paths[img_pair[1]];&amp;#10;                        if ((Number.parseInt(expInfo[&quot;design&quot;]) &lt; 5)) {&amp;#10;                            corr = &quot;j&quot;;&amp;#10;                        } else {&amp;#10;                            if ((Number.parseInt(expInfo[&quot;design&quot;]) &gt; 4)) {&amp;#10;                                corr = &quot;f&quot;;&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;thisExp.addData(&quot;fix_switches&quot;, fix_switch[trialID]);&amp;#10;thisExp.addData(&quot;side&quot;, xPosition);&amp;#10;thisExp.addData(&quot;trial_type1S0D&quot;, trial_order[trialID]);&amp;#10;thisExp.addData(&quot;target&quot;, target);&amp;#10;thisExp.addData(&quot;probe&quot;, probe);&amp;#10;thisExp.addData(&quot;block_type&quot;, Block_type);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="img_pair = 0&amp;#10;target = 0&amp;#10;probe = 0&amp;#10;corr = 0&amp;#10;trialID = trialID + 1&amp;#10;&amp;#10;if int(expInfo['position']) == 0:&amp;#10;    xPosition = 0&amp;#10;elif int(expInfo['position']) == 2:&amp;#10;    if trial_order[trialID]==1:&amp;#10;        sameTrialid += 1&amp;#10;        if side_same == 1: #left&amp;#10;            xPosition = -(width4deg*x_scale)&amp;#10;            sameTrial_left_id += 1&amp;#10;            target = paths[trialSame_left[sameTrial_left_id]]&amp;#10;            probe = paths[trialSame_left[sameTrial_left_id]]&amp;#10;            if int(expInfo['design']) &lt; 5:&amp;#10;                corr = 'f'&amp;#10;            elif int(expInfo['design']) &gt; 4:&amp;#10;                corr = 'j'&amp;#10;        elif side_same == 0: #right&amp;#10;            xPosition = width4deg*x_scale&amp;#10;            sameTrial_right_id += 1&amp;#10;            target = paths[trialSame_right[sameTrial_right_id]]&amp;#10;            probe = paths[trialSame_right[sameTrial_right_id]]&amp;#10;            if int(expInfo['design']) &lt; 5:&amp;#10;                corr = 'f'&amp;#10;            elif int(expInfo['design']) &gt; 4:&amp;#10;                corr = 'j'&amp;#10;    elif trial_order[trialID]==0:&amp;#10;        diffTrialid += 1&amp;#10;        if side_diff == 1: #left&amp;#10;            xPosition = -(width4deg*x_scale)&amp;#10;            diffTrial_left_id += 1&amp;#10;            print(diffTrial_left_id)&amp;#10;            print(trialDiff_left[diffTrial_left])&amp;#10;            img_pair = trialDiff_left[diffTrial_left[diffTrial_left_id]]&amp;#10;            target = paths[img_pair[0]]&amp;#10;            probe = paths[img_pair[1]]&amp;#10;            if int(expInfo['design']) &lt; 5:&amp;#10;                corr = 'j'&amp;#10;            elif int(expInfo['design']) &gt; 4:&amp;#10;                corr = 'f'&amp;#10;        elif side_diff == 0: #right&amp;#10;            xPosition = width4deg*x_scale&amp;#10;            diffTrial_right_id += 1&amp;#10;            print(diffTrial_right_id)&amp;#10;            print(trialDiff_right[diffTrial_right])&amp;#10;            img_pair = trialDiff_right[diffTrial_right[diffTrial_right_id]]&amp;#10;            target = paths[img_pair[0]]&amp;#10;            probe = paths[img_pair[1]]&amp;#10;            if int(expInfo['design']) &lt; 5:&amp;#10;                corr = 'j'&amp;#10;            elif int(expInfo['design']) &gt; 4:&amp;#10;                corr = 'f'&amp;#10;elif int(expInfo['position']) == 1:&amp;#10;    xPosition = -(width4deg*x_scale)&amp;#10;    if trial_order[trialID]==1:&amp;#10;        sameTrialid += 1&amp;#10;        target = paths[trialSame[sameTrialid]]&amp;#10;        probe = paths[trialSame[sameTrialid]]&amp;#10;        if int(expInfo['design']) &lt; 5:&amp;#10;            corr = 'f'&amp;#10;        elif int(expInfo['design']) &gt; 4:&amp;#10;            corr = 'j'&amp;#10;    elif trial_order[trialID]==0:&amp;#10;        diffTrialid += 1&amp;#10;        img_pair = trialDiff[diffTrial[diffTrialid]]&amp;#10;        target = paths[img_pair[0]]&amp;#10;        probe = paths[img_pair[1]]&amp;#10;        if int(expInfo['design']) &lt; 5:&amp;#10;            corr = 'j'&amp;#10;        elif int(expInfo['design']) &gt; 4:&amp;#10;            corr = 'f'&amp;#10;elif int(expInfo['position']) == 3:&amp;#10;    xPosition = width4deg*x_scale&amp;#10;    if trial_order[trialID]==1:&amp;#10;        sameTrialid += 1&amp;#10;        target = paths[trialSame[sameTrialid]]&amp;#10;        probe = paths[trialSame[sameTrialid]]&amp;#10;        if int(expInfo['design']) &lt; 5:&amp;#10;            corr = 'f'&amp;#10;        elif int(expInfo['design']) &gt; 4:&amp;#10;            corr = 'j'&amp;#10;    elif trial_order[trialID]==0:&amp;#10;        diffTrialid += 1&amp;#10;        img_pair = trialDiff[diffTrial[diffTrialid]]&amp;#10;        target = paths[img_pair[0]]&amp;#10;        probe = paths[img_pair[1]]&amp;#10;        if int(expInfo['design']) &lt; 5:&amp;#10;            corr = 'j'&amp;#10;        elif int(expInfo['design']) &gt; 4:&amp;#10;            corr = 'f'&amp;#10;&amp;#10;thisExp.addData('fix_switches', fix_switch[trialID])&amp;#10;thisExp.addData('side', xPosition)&amp;#10;thisExp.addData('trial_type1S0D',trial_order[trialID])&amp;#10;thisExp.addData('target',target)&amp;#10;thisExp.addData('probe',probe)&amp;#10;thisExp.addData('block_type',Block_type)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_4" valType="code"/>
      </CodeComponent>
      <TextComponent name="text_4">
        <Param name="color" updates="set every repeat" val="$fix_color" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <ImageComponent name="target_image">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$target" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="target_image" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$(xPosition, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="set every repeat" val="$img_size" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
    </Routine>
    <Routine name="probe_img">
      <TextComponent name="text_5">
        <Param name="color" updates="set every repeat" val="$fix_color" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <ImageComponent name="probe_image">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$probe" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="probe_image" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$(xPosition, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="set every repeat" val="$img_size" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
    </Routine>
    <Routine name="startInstruct">
      <CodeComponent name="code_2">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="fix_color_options = [&quot;white&quot;,&quot;black&quot;];&amp;#10;block_count = -1&amp;#10;if int(expInfo['design']) == 1:&amp;#10;    design_file = 'Designs/design1.csv'&amp;#10;elif int(expInfo['design']) == 2:&amp;#10;    design_file = 'Designs/design2.csv'&amp;#10;elif int(expInfo['design']) == 3:&amp;#10;    design_file = 'Designs/design3.csv'&amp;#10;elif int(expInfo['design']) == 4:&amp;#10;    design_file = 'Designs/design4.csv'&amp;#10;elif int(expInfo['design']) == 5:&amp;#10;    design_file = 'Designs/design5.csv'&amp;#10;elif int(expInfo['design']) == 6:&amp;#10;    design_file = 'Designs/design6.csv'&amp;#10;elif int(expInfo['design']) == 7:&amp;#10;    design_file = 'Designs/design7.csv'&amp;#10;elif int(expInfo['design']) == 8:&amp;#10;    design_file = 'Designs/design8.csv'" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="fix_color_options = [&quot;white&quot;, &quot;black&quot;];&amp;#10;block_count = (- 1);&amp;#10;if ((Number.parseInt(expInfo[&quot;design&quot;]) === 1)) {&amp;#10;    design_file = &quot;Designs/design1.csv&quot;;&amp;#10;} else {&amp;#10;    if ((Number.parseInt(expInfo[&quot;design&quot;]) === 2)) {&amp;#10;        design_file = &quot;Designs/design2.csv&quot;;&amp;#10;    } else {&amp;#10;        if ((Number.parseInt(expInfo[&quot;design&quot;]) === 3)) {&amp;#10;            design_file = &quot;Designs/design3.csv&quot;;&amp;#10;        } else {&amp;#10;            if ((Number.parseInt(expInfo[&quot;design&quot;]) === 4)) {&amp;#10;                design_file = &quot;Designs/design4.csv&quot;;&amp;#10;            } else {&amp;#10;                if ((Number.parseInt(expInfo[&quot;design&quot;]) === 5)) {&amp;#10;                    design_file = &quot;Designs/design5.csv&quot;;&amp;#10;                } else {&amp;#10;                    if ((Number.parseInt(expInfo[&quot;design&quot;]) === 6)) {&amp;#10;                        design_file = &quot;Designs/design6.csv&quot;;&amp;#10;                    } else {&amp;#10;                        if ((Number.parseInt(expInfo[&quot;design&quot;]) === 7)) {&amp;#10;                            design_file = &quot;Designs/design7.csv&quot;;&amp;#10;                        } else {&amp;#10;                            if ((Number.parseInt(expInfo[&quot;design&quot;]) === 8)) {&amp;#10;                                design_file = &quot;Designs/design8.csv&quot;;&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_2" valType="code"/>
      </CodeComponent>
      <TextComponent name="text_3">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Now you are ready to play the game!&amp;#10;&amp;#10;You will be doing the same thing you just practiced. The pictures come fast, but try your best!&amp;#10;&amp;#10;Press &lt;SPACE&gt; to see the instructions!" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_7">
        <Param name="allowedKeys" updates="constant" val="'space'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_7" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="trial_resp">
      <TextComponent name="text_2">
        <Param name="color" updates="set every repeat" val="$fix_color" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp">
        <Param name="allowedKeys" updates="constant" val="'f','j'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$corr" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="ISI_fix">
      <TextComponent name="text">
        <Param name="color" updates="set every repeat" val="$fix_color" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="instrBlock">
      <CodeComponent name="code_3">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="start_side = [0,1]&amp;#10;shuffle(start_side)&amp;#10;start_side = start_side[0]" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="start_side = shuffle_array([0,1])&amp;#10;start_side = start_side[0]" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="// add-on: list(s: string): string[]&amp;#10;function list(s) {&amp;#10;    // if s is a string, we return a list of its characters&amp;#10;    if (typeof s === 'string')&amp;#10;        return s.split('');&amp;#10;    else&amp;#10;        // otherwise we return s:&amp;#10;        return s;&amp;#10;}&amp;#10;&amp;#10;function shuffle_array(array) {&amp;#10;    for (let i = array.length - 1; i &gt; 0; i--) {&amp;#10;        let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i&amp;#10;&amp;#10;            // swap elements array[i] and array[j]&amp;#10;            // we use &quot;destructuring assignment&quot; syntax to achieve that&amp;#10;            // you'll find more details about that syntax in later chapters&amp;#10;            // same can be written as:&amp;#10;            // let t = array[i]; array[i] = array[j]; array[j] = t&amp;#10;        [array[i], array[j]] = [array[j], array[i]];&amp;#10;    }&amp;#10;    return array&amp;#10;}&amp;#10;&amp;#10;function divide_subPoint1(array, divisor) {&amp;#10;    let array_divided = array.map(function(element) {&amp;#10;        return element/divisor - 0.1;&amp;#10;    });&amp;#10;    return array_divided&amp;#10;}&amp;#10;&amp;#10;function round_array(array) {&amp;#10;    array = array.map(function(each_element){&amp;#10;        return Math.round(each_element);&amp;#10;    }); &amp;#10;    return array&amp;#10;}&amp;#10;&amp;#10;img_size=&quot;&quot;;&amp;#10;block_count = block_count + 1;&amp;#10;corrFix_count = 0;&amp;#10;missFix_count = 0;&amp;#10;if ((Block_type === &quot;conf_face&quot;)) {&amp;#10;    img_size = (width*x_scale*0.67,height*y_scale)&amp;#10;    paths = [&quot;Stimuli/edmd.png&quot;, &quot;Stimuli/eimd.png&quot;, &quot;Stimuli/eomu.png&quot;, &quot;Stimuli/eumu.png&quot;];&amp;#10;    if ((Number.parseInt(expInfo[&quot;design&quot;]) &lt; 5)) {&amp;#10;        instruction_img = &quot;Designs/instructions_face_1234.png&quot;;&amp;#10;    } else {&amp;#10;        instruction_img = &quot;Designs/instructions_face_5678.png&quot;;&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((Block_type === &quot;conf_haus&quot;)) {&amp;#10;        img_size = (width*x_scale*1.36,height*y_scale)&amp;#10;        paths = [&quot;Stimuli/H-8sim0.png&quot;, &quot;Stimuli/H-8sim1.png&quot;, &quot;Stimuli/H-8sim2.png&quot;, &quot;Stimuli/H-8sim3.png&quot;];&amp;#10;        if ((Number.parseInt(expInfo[&quot;design&quot;]) &lt; 5)) {&amp;#10;            instruction_img = &quot;Designs/instructions_haus_1234.png&quot;;&amp;#10;        } else {&amp;#10;            instruction_img = &quot;Designs/instructions_haus_5678.png&quot;;&amp;#10;        }&amp;#10;    } else {&amp;#10;        if ((Block_type === &quot;feat_face&quot;)) {&amp;#10;            img_size = (width*x_scale*0.67,height*y_scale)&amp;#10;            paths = [&quot;Stimuli/f15.png&quot;, &quot;Stimuli/f24.png&quot;, &quot;Stimuli/f131.png&quot;, &quot;Stimuli/f142.png&quot;];&amp;#10;            if ((Number.parseInt(expInfo[&quot;design&quot;]) &lt; 5)) {&amp;#10;                instruction_img = &quot;Designs/instructions_face_1234.png&quot;;&amp;#10;            } else {&amp;#10;                instruction_img = &quot;Designs/instructions_face_5678.png&quot;;&amp;#10;            }&amp;#10;        } else {&amp;#10;            if ((Block_type === &quot;feat_haus&quot;)) {&amp;#10;                img_size = (width*x_scale*1.36,height*y_scale)&amp;#10;                paths = [&quot;Stimuli/H5sim0.png&quot;, &quot;Stimuli/H6sim0.png&quot;, &quot;Stimuli/H7sim0.png&quot;, &quot;Stimuli/H8sim0.png&quot;];&amp;#10;                if ((Number.parseInt(expInfo[&quot;design&quot;]) &lt; 5)) {&amp;#10;                    instruction_img = &quot;Designs/instructions_haus_1234.png&quot;;&amp;#10;                } else {&amp;#10;                    instruction_img = &quot;Designs/instructions_haus_5678.png&quot;;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;trialSame = 0;&amp;#10;trialDiff = 0;&amp;#10;diffTrial = 0;&amp;#10;sameTrialid = -1;&amp;#10;diffTrialid = -1;&amp;#10;sameTrial_left_id = -1;&amp;#10;diffTrial_left_id = -1;&amp;#10;sameTrial_right_id = -1;&amp;#10;diffTrial_right_id = -1;&amp;#10;trialID = -1;&amp;#10;rand_start = shuffle_array([0,1]);&amp;#10;fix_color = fix_color_options[rand_start[0]];&amp;#10;&amp;#10;if ((Number.parseInt(expInfo[&quot;position&quot;]) === 2)) {&amp;#10;    numTrials = 48;&amp;#10;    trial_order = [shuffle_array([1, 2, 3, 4, 5, 6]), shuffle_array([1, 2, 3, 4, 5, 6]), shuffle_array([1, 2, 3, 4, 5, 6]), shuffle_array([1, 2, 3, 4, 5, 6]),shuffle_array([1, 2, 3, 4, 5, 6]), shuffle_array([1, 2, 3, 4, 5, 6]), shuffle_array([1, 2, 3, 4, 5, 6]), shuffle_array([1, 2, 3, 4, 5, 6])].flat();&amp;#10;    trial_order = round_array(divide_subPoint1(trial_order,6))&amp;#10;    trialSame_left = [shuffle_array([0, 1, 2, 3]), shuffle_array([0, 1, 2, 3]), shuffle_array([0, 1, 2, 3]), shuffle_array([0, 1, 2, 3]), shuffle_array([0, 1, 2, 3]), shuffle_array([0, 1, 2, 3])].flat();&amp;#10;    trialDiff_left = [[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [1, 0], [2, 3], [2, 0], [2, 1], [3, 0], [3, 1], [3, 2], [0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [1, 0], [2, 3], [2, 0], [2, 1], [3, 0], [3, 1], [3, 2]];&amp;#10;    diffTrial_left = shuffle_array(list([...Array(24).keys()]));&amp;#10;    trialSame_right = [shuffle_array([0, 1, 2, 3]), shuffle_array([0, 1, 2, 3]), shuffle_array([0, 1, 2, 3]), shuffle_array([0, 1, 2, 3]), shuffle_array([0, 1, 2, 3]), shuffle_array([0, 1, 2, 3])].flat();&amp;#10;    trialDiff_right = [[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [1, 0], [2, 3], [2, 0], [2, 1], [3, 0], [3, 1], [3, 2], [0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [1, 0], [2, 3], [2, 0], [2, 1], [3, 0], [3, 1], [3, 2]];&amp;#10;    diffTrial_right = shuffle_array(list([...Array(24).keys()]));&amp;#10;    fix_switch = [[0,0],shuffle_array([1,0,0]),[0],shuffle_array([1,0,0]),[0],shuffle_array([1,0,0]),[0],shuffle_array([1,0,0]),[0],shuffle_array([1,0,0]),[0],shuffle_array([1,0,0]),shuffle_array([1,0,0]),[0],shuffle_array([1,0,0]),shuffle_array([1,0,0]),[0],shuffle_array([1,0,0]),shuffle_array([1,0,0]),[0],shuffle_array([1,0,0]),[0,0]].flat();&amp;#10;    if ((block_count === 0)) {&amp;#10;        if ((start_side === 0)) {&amp;#10;            side_same = 0;&amp;#10;            side_diff = 0;&amp;#10;        } else {&amp;#10;            side_same = 1;&amp;#10;            side_diff = 1;&amp;#10;        }&amp;#10;    } else {&amp;#10;        if ((block_count &lt; 5)) {&amp;#10;            if ((start_side === 0)) {&amp;#10;                side_same = 0;&amp;#10;                side_diff = 0;&amp;#10;            } else {&amp;#10;                side_same = 1;&amp;#10;                side_diff = 1;&amp;#10;            }&amp;#10;        } else {&amp;#10;            if ((start_side === 0)) {&amp;#10;                side_same = 1;&amp;#10;                side_diff = 1;&amp;#10;            } else {&amp;#10;                side_same = 0;&amp;#10;                side_diff = 0;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((Number.parseInt(expInfo[&quot;position&quot;]) === 1)) {&amp;#10;        numTrials = 24;&amp;#10;        trial_order = [shuffle_array([1, 2, 3, 4, 5, 6]), shuffle_array([1, 2, 3, 4, 5, 6]), shuffle_array([1, 2, 3, 4, 5, 6]), shuffle_array([1, 2, 3, 4, 5, 6])].flat();&amp;#10;        trial_order = round_array(divide_subPoint1(trial_order,6))&amp;#10;        trialSame = [shuffle_array([0, 1, 2, 3]), shuffle_array([0, 1, 2, 3]), shuffle_array([0, 1, 2, 3])].flat();&amp;#10;        trialDiff = [[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [1, 0], [2, 3], [2, 0], [2, 1], [3, 0], [3, 1], [3, 2]];&amp;#10;        diffTrial = shuffle_array(list([...Array(12).keys()]));&amp;#10;        fix_switch = [[0,0],shuffle_array([1,0,0]),[0],shuffle_array([1,0]),[0],shuffle_array([1,0,0]),[0],shuffle_array([1,0]),[0],shuffle_array([1,0,0]),[0],shuffle_array([1,0]),[0,0]].flat();&amp;#10;    } else {&amp;#10;        if ((Number.parseInt(expInfo[&quot;position&quot;]) === 3)) {&amp;#10;            numTrials = 24;&amp;#10;            trial_order = [shuffle_array([1, 2, 3, 4, 5, 6]), shuffle_array([1, 2, 3, 4, 5, 6]), shuffle_array([1, 2, 3, 4, 5, 6]), shuffle_array([1, 2, 3, 4, 5, 6])].flat();&amp;#10;            trial_order = round_array(divide_subPoint1(trial_order,6))&amp;#10;            trialSame = [shuffle_array([0, 1, 2, 3]), shuffle_array([0, 1, 2, 3]), shuffle_array([0, 1, 2, 3])].flat();&amp;#10;            trialDiff = [[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [1, 0], [2, 3], [2, 0], [2, 1], [3, 0], [3, 1], [3, 2]];&amp;#10;            diffTrial = shuffle_array(list([...Array(12).keys()]));&amp;#10;            fix_switch = [[0,0],shuffle_array([1,0,0]),[0],shuffle_array([1,0]),[0],shuffle_array([1,0,0]),[0],shuffle_array([1,0]),[0],shuffle_array([1,0,0]),[0],shuffle_array([1,0]),[0,0]].flat();&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="img_size =''&amp;#10;block_count = block_count + 1&amp;#10;corrFix_count = 0&amp;#10;missFix_count = 0&amp;#10;if Block_type == 'conf_face':&amp;#10;    img_size = (width*x_scale,height*y_scale)&amp;#10;    paths = ['Stimuli/edmd.png', 'Stimuli/eimd.png', 'Stimuli/eomu.png', 'Stimuli/eumu.png']&amp;#10;    if int(expInfo['design']) &lt; 5:&amp;#10;        instruction_img = 'Designs/instructions_face_1234.png'&amp;#10;    else:&amp;#10;        instruction_img = 'Designs/instructions_face_5678.png'&amp;#10;elif Block_type == 'conf_haus':&amp;#10;    img_size = (width*x_scale,height*y_scale)&amp;#10;    paths =  ['Stimuli/H-8sim0.png', 'Stimuli/H-8sim1.png', 'Stimuli/H-8sim2.png', 'Stimuli/H-8sim3.png']&amp;#10;    if int(expInfo['design']) &lt; 5:&amp;#10;        instruction_img = 'Designs/instructions_haus_1234.png'&amp;#10;    else:&amp;#10;        instruction_img = 'Designs/instructions_haus_5678.png'&amp;#10;elif Block_type == 'feat_face':&amp;#10;    img_size = (width*x_scale,height*y_scale)&amp;#10;    paths =  ['Stimuli/f15.png', 'Stimuli/f24.png', 'Stimuli/f131.png', 'Stimuli/f142.png']&amp;#10;    if int(expInfo['design']) &lt; 5:&amp;#10;        instruction_img = 'Designs/instructions_face_1234.png'&amp;#10;    else:&amp;#10;        instruction_img = 'Designs/instructions_face_5678.png'&amp;#10;elif Block_type == 'feat_haus':&amp;#10;    img_size = (width*x_scale,height*y_scale)&amp;#10;    paths = ['Stimuli/H5sim0.png', 'Stimuli/H6sim0.png', 'Stimuli/H7sim0.png', 'Stimuli/H8sim0.png']&amp;#10;    if int(expInfo['design']) &lt; 5:&amp;#10;        instruction_img = 'Designs/instructions_haus_1234.png'&amp;#10;    else:&amp;#10;        instruction_img = 'Designs/instructions_haus_5678.png'&amp;#10;&amp;#10;sameTrialid = -1&amp;#10;diffTrialid = -1&amp;#10;sameTrial_left_id = -1&amp;#10;diffTrial_left_id = -1&amp;#10;sameTrial_right_id = -1&amp;#10;diffTrial_right_id = -1&amp;#10;trialID = -1;&amp;#10;rand_start = [0,1]&amp;#10;shuffle(rand_start)&amp;#10;fix_color = fix_color_options[rand_start[0]]&amp;#10;&amp;#10;if int(expInfo['position']) == 2:&amp;#10;    trial_order = np.concatenate((permutation([1, 2, 3, 4, 5, 6]),permutation([1, 2, 3, 4, 5, 6]),permutation([1, 2, 3, 4, 5, 6]),permutation([1, 2, 3, 4, 5, 6]),permutation([1, 2, 3, 4, 5, 6]),permutation([1, 2, 3, 4, 5, 6]),permutation([1, 2, 3, 4, 5, 6]),permutation([1, 2, 3, 4, 5, 6])))&amp;#10;    trial_order = np.round(trial_order / 6 - 0.1)&amp;#10;    trialSame_left = np.concatenate((permutation([0, 1, 2, 3]),permutation([0, 1, 2, 3]),permutation([0, 1, 2, 3]),permutation([0, 1, 2, 3]),permutation([0, 1, 2, 3]),permutation([0, 1, 2, 3])))&amp;#10;    trialDiff_left = np.array([(0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (1, 0), (2, 3), (2, 0), (2, 1),(3, 0), (3, 1), (3, 2), (0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (1, 0), (2, 3), (2, 0), (2, 1),(3, 0), (3, 1), (3, 2)])&amp;#10;    trialSame_right = np.concatenate((permutation([0, 1, 2, 3]),permutation([0, 1, 2, 3]),permutation([0, 1, 2, 3]),permutation([0, 1, 2, 3]),permutation([0, 1, 2, 3]),permutation([0, 1, 2, 3])))&amp;#10;    trialDiff_right = np.array([(0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (1, 0), (2, 3), (2, 0), (2, 1),(3, 0), (3, 1), (3, 2),(0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (1, 0), (2, 3), (2, 0), (2, 1),(3, 0), (3, 1), (3, 2)])&amp;#10;    diffTrial_left = list(range(24))&amp;#10;    shuffle(diffTrial_left)&amp;#10;    diffTrial_right = list(range(24))&amp;#10;    shuffle(diffTrial_right)&amp;#10;    numTrials = 48&amp;#10;    fxs_1 = [1,0,0]&amp;#10;    fxs_2 = [1,0,0]&amp;#10;    fxs_3 = [1,0,0]&amp;#10;    fxs_4 = [1,0,0]&amp;#10;    fxs_5 = [1,0,0]&amp;#10;    fxs_6 = [1,0,0]&amp;#10;    fxs_7 = [1,0,0]&amp;#10;    fxs_8 = [1,0,0]&amp;#10;    fxs_9 = [1,0,0]&amp;#10;    fxs_10 = [1,0,0]&amp;#10;    fxs_11 = [1,0,0]&amp;#10;    fxs_12 = [1,0,0]&amp;#10;    shuffle(fxs_1)&amp;#10;    shuffle(fxs_2)&amp;#10;    shuffle(fxs_3)&amp;#10;    shuffle(fxs_4)&amp;#10;    shuffle(fxs_5)&amp;#10;    shuffle(fxs_6)&amp;#10;    shuffle(fxs_7)&amp;#10;    shuffle(fxs_8)&amp;#10;    shuffle(fxs_9)&amp;#10;    shuffle(fxs_10)&amp;#10;    shuffle(fxs_11)&amp;#10;    shuffle(fxs_12)&amp;#10;    fix_switch = [0,0]+fxs_1+[0]+fxs_2+[0]+fxs_3+[0]+fxs_4+[0]+fxs_5+[0]+fxs_6+fxs_7+[0]+fxs_8+fxs_9+[0]+fxs_10+fxs_11+[0]+fxs_12+[0,0]&amp;#10;    if block_count == 0:&amp;#10;        if start_side == 0:&amp;#10;            side_same = 0&amp;#10;            side_diff = 0&amp;#10;        else:&amp;#10;            side_same = 1&amp;#10;            side_diff = 1&amp;#10;    else:&amp;#10;        if block_count &lt; 5:&amp;#10;            if start_side == 0:&amp;#10;                side_same = 0&amp;#10;                side_diff = 0&amp;#10;            else:&amp;#10;                side_same = 1&amp;#10;                side_diff = 1&amp;#10;        else:&amp;#10;            if start_side == 0:&amp;#10;                side_same = 1&amp;#10;                side_diff = 1&amp;#10;            else:&amp;#10;                side_same = 0&amp;#10;                side_diff = 0&amp;#10;elif int(expInfo['position']) == 1:&amp;#10;    trial_order = np.concatenate((permutation([1, 2, 3, 4, 5, 6]),permutation([1, 2, 3, 4, 5, 6]),permutation([1, 2, 3, 4, 5, 6]),permutation([1, 2, 3, 4, 5, 6])))&amp;#10;    trial_order = np.round(trial_order / 6 - 0.1)&amp;#10;    trialSame = np.concatenate((permutation([0, 1, 2, 3]),permutation([0, 1, 2, 3]),permutation([0, 1, 2, 3])))&amp;#10;    trialDiff = np.array([(0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (1, 0), (2, 3), (2, 0), (2, 1),(3, 0), (3, 1), (3, 2)])&amp;#10;    diffTrial = list(range(12))&amp;#10;    shuffle(diffTrial)&amp;#10;    numTrials = 24&amp;#10;    fxs_1 = [1,0,0]&amp;#10;    fxs_2 = [1,0]&amp;#10;    fxs_3 = [1,0,0]&amp;#10;    fxs_4 = [1,0]&amp;#10;    fxs_5 = [1,0,0]&amp;#10;    fxs_6 = [1,0]&amp;#10;    shuffle(fxs_1)&amp;#10;    shuffle(fxs_2)&amp;#10;    shuffle(fxs_3)&amp;#10;    shuffle(fxs_4)&amp;#10;    shuffle(fxs_5)&amp;#10;    shuffle(fxs_6)&amp;#10;    fix_switch = [0,0]+fxs_1+[0]+fxs_2+[0]+fxs_3+[0]+fxs_4+[0]+fxs_5+[0]+fxs_6+[0,0]&amp;#10;elif int(expInfo['position']) == 3:&amp;#10;    trial_order = np.concatenate((permutation([1, 2, 3, 4, 5, 6]),permutation([1, 2, 3, 4, 5, 6]),permutation([1, 2, 3, 4, 5, 6]),permutation([1, 2, 3, 4, 5, 6])))&amp;#10;    trial_order = np.round(trial_order / 6 - 0.1)&amp;#10;    trialSame = np.concatenate((permutation([0, 1, 2, 3]),permutation([0, 1, 2, 3]),permutation([0, 1, 2, 3])))&amp;#10;    trialDiff = np.array([(0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (1, 0), (2, 3), (2, 0), (2, 1),(3, 0), (3, 1), (3, 2)])&amp;#10;    diffTrial = list(range(12))&amp;#10;    shuffle(diffTrial)&amp;#10;    numTrials = 24&amp;#10;    fxs_1 = [1,0,0]&amp;#10;    fxs_2 = [1,0]&amp;#10;    fxs_3 = [1,0,0]&amp;#10;    fxs_4 = [1,0]&amp;#10;    fxs_5 = [1,0,0]&amp;#10;    fxs_6 = [1,0]&amp;#10;    shuffle(fxs_1)&amp;#10;    shuffle(fxs_2)&amp;#10;    shuffle(fxs_3)&amp;#10;    shuffle(fxs_4)&amp;#10;    shuffle(fxs_5)&amp;#10;    shuffle(fxs_6)&amp;#10;    fix_switch = [0,0]+fxs_1+[0]+fxs_2+[0]+fxs_3+[0]+fxs_4+[0]+fxs_5+[0]+fxs_6+[0,0]&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_3" valType="code"/>
      </CodeComponent>
      <ImageComponent name="instructions_image">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$instruction_img" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="instructions_image" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="constant" val="(0.75*1.5, 0.75)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_2">
        <Param name="allowedKeys" updates="constant" val="'space'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="1" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="EndScreen">
      <TextComponent name="allDone">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="allDone" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="You are all done. Thank you!" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="feedback">
      <CodeComponent name="code_5">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="blockMsg = ((((&quot;Good job! You have &quot; + (8 - block_count).toString()) + &quot; rounds left. \n\nYou missed &quot;) + missFix_count.toString()) + &quot; of the fix changes. Keep your eyes in the middle! \n\nPress &lt;SPACE&gt; to keep going!&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="&amp;#10;blockMsg = 'Good job! You have ' + str(8-block_count) + ' rounds left. \n\nYou missed '+str(missFix_count)+' of the fix changes. Keep your eyes in the middle! \n\nPress &lt;SPACE&gt; to keep going!'" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_5" valType="code"/>
      </CodeComponent>
      <TextComponent name="good_job">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="good_job" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$blockMsg" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_8">
        <Param name="allowedKeys" updates="constant" val="'space'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_8" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="prac_instructions">
      <CodeComponent name="code_6">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="function shuffle_array(array) {&amp;#10;    for (let i = array.length - 1; i &gt; 0; i--) {&amp;#10;        let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i&amp;#10;&amp;#10;            // swap elements array[i] and array[j]&amp;#10;            // we use &quot;destructuring assignment&quot; syntax to achieve that&amp;#10;            // you'll find more details about that syntax in later chapters&amp;#10;            // same can be written as:&amp;#10;            // let t = array[i]; array[i] = array[j]; array[j] = t&amp;#10;        [array[i], array[j]] = [array[j], array[i]];&amp;#10;    }&amp;#10;    return array&amp;#10;}&amp;#10;&amp;#10;pracCorr = &quot;&quot;;&amp;#10;corrFix = &quot;&quot;;&amp;#10;&amp;#10;&amp;#10;numIncorr_fix = 0;&amp;#10;numIncorr_img = 0;&amp;#10;numIncorr_miss = 0;&amp;#10;&amp;#10;&amp;#10;pTrial = 0;&amp;#10;pfix_color_options = [&quot;white&quot;, &quot;black&quot;];&amp;#10;prac_paths = &quot;&quot;;&amp;#10;samepTrials = &quot;&quot;;&amp;#10;diffpTrials = &quot;&quot;;&amp;#10;side_same_prac = &quot;&quot;;&amp;#10;side_diff_prac = &quot;&quot;;&amp;#10;samePTrialid = 0;&amp;#10;diffPTrialid = 0;&amp;#10;sameCount = 0;&amp;#10;diffCount = 0;&amp;#10;samepTrials = [0,1,2,3,4,5,6,7];&amp;#10;shuffle(samepTrials);&amp;#10;diffpTrials = [[0,1],[0,2],[0,3],[1,2],[1,3],[2,3],[4,5],[4,6],[4,7],[5,6],[5,7],[6,7]];&amp;#10;shuffle(diffpTrials); &amp;#10;ptrial_order = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1];&amp;#10;corrpFix = &quot;&quot;;&amp;#10;numPTrials_slow=''&amp;#10;numPTrials_fast=''&amp;#10;numPTrials_slow = 4&amp;#10;numPTrials_fast = 4&amp;#10;//pfix_switch = [0,0,shuffle_array([1,0,0,0]),shuffle_array([1,0,0,1]),0,0].flat();&amp;#10;side_same_prac = [0, 0, 0, 0, 1, 1, 1, 1];&amp;#10;side_diff_prac = [0, 0, 0, 0, 1, 1, 1, 1];&amp;#10;&amp;#10;rand_Pstart = [0, 1];&amp;#10;shuffle(rand_Pstart);&amp;#10;pfix_color = pfix_color_options[rand_Pstart[0]];&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="pracCorr=''&amp;#10;prac_paths=''&amp;#10;corrFix =''&amp;#10;samepTrials=''&amp;#10;diffpTrials=''&amp;#10;numPTrials_slow=''&amp;#10;&amp;#10;numIncorr_fix = 0&amp;#10;numIncorr_img = 0&amp;#10;numIncorr_miss = 0&amp;#10;&amp;#10;pTrial = 0&amp;#10;pfix_color_options = ['white','black']&amp;#10;sameCount = 0&amp;#10;diffCount = 0&amp;#10;&amp;#10;samepTrials = [0,1,2,3,4,5,6,7]&amp;#10;diffpTrials = [[0,1],[0,2],[0,3],[1,2],[1,3],[2,3],[4,5],[4,6],[4,7],[5,6],[5,7],[6,7]]&amp;#10;shuffle(samepTrials)&amp;#10;shuffle(diffpTrials)&amp;#10;&amp;#10;ptrial_order = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]&amp;#10;&amp;#10;corrpFix =''&amp;#10;samePTrialid = 0&amp;#10;diffPTrialid = 0&amp;#10;numPTrials_slow = 4&amp;#10;numPTrials_fast = 4&amp;#10;&amp;#10;side_same_prac = [0,0,0,0,1,1,1,1]&amp;#10;shuffle(side_same_prac)&amp;#10;side_diff_prac = [0,0,0,0,1,1,1,1]&amp;#10;shuffle(side_diff_prac)&amp;#10;&amp;#10;rand_Pstart = [0,1]&amp;#10;shuffle(rand_Pstart)&amp;#10;pfix_color = pfix_color_options[rand_Pstart[0]]" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_6" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="prePrac2">
      <CodeComponent name="code_9">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="if int(expInfo['design']) &lt; 5:&amp;#10;    prePrac2 = 'Designs/prac_instr2_1234.png'&amp;#10;    prePrac1Corr = 'j'&amp;#10;elif int(expInfo['design']) &gt; 4:&amp;#10;    prePrac2 = 'Designs/prac_instr2_5678.png'&amp;#10;    prePrac1Corr = 'f'&amp;#10;&amp;#10;&amp;#10;if which_first[0] == 0:&amp;#10;    prePracTargetImg2 = allHs[2]&amp;#10;    prePracProbeImg2 = allHs[2]&amp;#10;elif which_first[0] == 1:&amp;#10;    prePracTargetImg2 = allFs[2]&amp;#10;    prePracProbeImg2 = allFs[2]" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="if ((Number.parseInt(expInfo[&quot;design&quot;]) &lt; 5)) {&amp;#10;    prePrac2 = &quot;Designs/prac_instr2_1234.png&quot;;&amp;#10;    prePrac1Corr = &quot;j&quot;;&amp;#10;} else {&amp;#10;    if ((Number.parseInt(expInfo[&quot;design&quot;]) &gt; 4)) {&amp;#10;        prePrac2 = &quot;Designs/prac_instr2_5678.png&quot;;&amp;#10;        prePrac1Corr = &quot;f&quot;;&amp;#10;    }&amp;#10;}&amp;#10;if ((which_first[0] === 0)) {&amp;#10;    prePracTargetImg2 = allHs[2];&amp;#10;    prePracProbeImg2 = allHs[2];&amp;#10;} else {&amp;#10;    if ((which_first[0] === 1)) {&amp;#10;        prePracTargetImg2 = allFs[2];&amp;#10;        prePracProbeImg2 = allFs[2];&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_9" valType="code"/>
      </CodeComponent>
      <ImageComponent name="prac_instr2">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$prePrac2" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="prac_instr2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="constant" val="(0.75*1.5, 0.75)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="prePrac1Resp">
        <Param name="allowedKeys" updates="constant" val="'f','j'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$prePrac1Corr" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="prePrac1Resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="prePrac3">
      <CodeComponent name="code_10">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if ((prePrac1Resp.corr === 1)) {&amp;#10;    prePrac3 = &quot;Designs/prac_instr3_corr.png&quot;;&amp;#10;} else {&amp;#10;    if ((prePrac1Resp.corr !== 1)) {&amp;#10;        prePrac3 = &quot;Designs/prac_instr3_wrong.png&quot;;&amp;#10;    }&amp;#10;}&amp;#10;if ((Number.parseInt(expInfo[&quot;position&quot;]) === 0)) {&amp;#10;    xPosition = 0;&amp;#10;} else {&amp;#10;    if ((Number.parseInt(expInfo[&quot;position&quot;]) === 2)) {&amp;#10;        xPosition = (- (width4deg * x_scale));&amp;#10;    } else {&amp;#10;        if ((Number.parseInt(expInfo[&quot;position&quot;]) === 1)) {&amp;#10;            xPosition = (- (width4deg * x_scale));&amp;#10;        } else {&amp;#10;            if ((Number.parseInt(expInfo[&quot;position&quot;]) === 3)) {&amp;#10;                xPosition = (width4deg * x_scale);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if prePrac1Resp.corr == 1:&amp;#10;    prePrac3 = 'Designs/prac_instr3_corr.png'&amp;#10;elif prePrac1Resp.corr != 1:&amp;#10;    prePrac3 = 'Designs/prac_instr3_wrong.png'&amp;#10;&amp;#10;if int(expInfo['position']) == 0:&amp;#10;    xPosition = 0&amp;#10;elif int(expInfo['position']) == 2:&amp;#10;    xPosition = -(width4deg*x_scale)&amp;#10;elif int(expInfo['position']) == 1:&amp;#10;    xPosition = -(width4deg*x_scale)&amp;#10;elif int(expInfo['position']) == 3:&amp;#10;    xPosition = width4deg*x_scale" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_10" valType="code"/>
      </CodeComponent>
      <ImageComponent name="prac_instr3_feedback">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$prePrac3" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="prac_instr3_feedback" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="constant" val="(0.75*1.5, 0.75)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_11">
        <Param name="allowedKeys" updates="constant" val="'space'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_11" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="prePrac4">
      <CodeComponent name="code_11">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="if int(expInfo['design']) &lt; 5:&amp;#10;    prePrac4 = 'Designs/prac_instr4_1234.png'&amp;#10;    prePrac2Corr = 'f'&amp;#10;    prePracFix = 'space'&amp;#10;elif int(expInfo['design']) &gt; 4:&amp;#10;    prePrac4 = 'Designs/prac_instr4_5678.png'&amp;#10;    prePrac2Corr = 'j'&amp;#10;    prePracFix = 'space'" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="if ((Number.parseInt(expInfo[&quot;design&quot;]) &lt; 5)) {&amp;#10;    prePrac4 = &quot;Designs/prac_instr4_1234.png&quot;;&amp;#10;    prePrac2Corr = &quot;f&quot;;&amp;#10;    prePracFix = &quot;space&quot;;&amp;#10;} else {&amp;#10;    if ((Number.parseInt(expInfo[&quot;design&quot;]) &gt; 4)) {&amp;#10;        prePrac4 = &quot;Designs/prac_instr4_5678.png&quot;;&amp;#10;        prePrac2Corr = &quot;j&quot;;&amp;#10;        prePracFix = &quot;space&quot;;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_11" valType="code"/>
      </CodeComponent>
      <ImageComponent name="prac_instr4">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$prePrac4" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="prac_instr4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="constant" val="(0.75*1.5, 0.75)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="9" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="prePrac2_fixResp">
        <Param name="allowedKeys" updates="constant" val="'space'," valType="code"/>
        <Param name="correctAns" updates="constant" val="$prePracFix" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="prePrac2_fixResp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="9" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <KeyboardComponent name="prePrac2_imgResp">
        <Param name="allowedKeys" updates="constant" val="'f','j'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$prePrac2Corr" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="prePrac2_imgResp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="9" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="prePrac5">
      <CodeComponent name="code_12">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if ((prePrac2_imgResp.corr === 1)) {&amp;#10;    if ((prePrac2_fixResp.corr === 1)) {&amp;#10;        if ((Number.parseInt(expInfo[&quot;design&quot;]) &lt; 5)) {&amp;#10;            prePrac5 = &quot;Designs/prac_instr5_1234_corr.png&quot;;&amp;#10;        } else {&amp;#10;            if ((Number.parseInt(expInfo[&quot;design&quot;]) &gt; 4)) {&amp;#10;                prePrac5 = &quot;Designs/prac_instr5_5678_corr.png&quot;;&amp;#10;            }&amp;#10;        }&amp;#10;    } else {&amp;#10;        if ((Number.parseInt(expInfo[&quot;design&quot;]) &lt; 5)) {&amp;#10;            prePrac5 = &quot;Designs/prac_instr5_1234_wrong.png&quot;;&amp;#10;        } else {&amp;#10;            if ((Number.parseInt(expInfo[&quot;design&quot;]) &gt; 4)) {&amp;#10;                prePrac5 = &quot;Designs/prac_instr5_5678_wrong.png&quot;;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((prePrac2_imgResp.corr !== 1)) {&amp;#10;        if ((Number.parseInt(expInfo[&quot;design&quot;]) &lt; 5)) {&amp;#10;            prePrac5 = &quot;Designs/prac_instr5_1234_wrong.png&quot;;&amp;#10;        } else {&amp;#10;            if ((Number.parseInt(expInfo[&quot;design&quot;]) &gt; 4)) {&amp;#10;                prePrac5 = &quot;Designs/prac_instr5_5678_wrong.png&quot;;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if prePrac2_imgResp.corr == 1:&amp;#10;    if prePrac2_fixResp.corr == 1:&amp;#10;        if int(expInfo['design']) &lt; 5:&amp;#10;            prePrac5 = 'Designs/prac_instr5_1234_corr.png'&amp;#10;        elif int(expInfo['design']) &gt; 4:&amp;#10;            prePrac5 = 'Designs/prac_instr5_5678_corr.png'&amp;#10;    else:&amp;#10;        if int(expInfo['design']) &lt; 5:&amp;#10;            prePrac5 = 'Designs/prac_instr5_1234_wrong.png'&amp;#10;        elif int(expInfo['design']) &gt; 4:&amp;#10;            prePrac5 = 'Designs/prac_instr5_5678_wrong.png'&amp;#10;elif prePrac2_imgResp.corr != 1:&amp;#10;    if int(expInfo['design']) &lt; 5:&amp;#10;        prePrac5 = 'Designs/prac_instr5_1234_wrong.png'&amp;#10;    elif int(expInfo['design']) &gt; 4:&amp;#10;        prePrac5 = 'Designs/prac_instr5_5678_wrong.png'    " valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="RepIfNeeded = 1;&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="RepIfNeeded = 1&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_12" valType="code"/>
      </CodeComponent>
      <ImageComponent name="prac_instr5">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$prePrac5" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="prac_instr5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="constant" val="(0.75*1.5, 0.75)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_12">
        <Param name="allowedKeys" updates="constant" val="'space'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_12" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="prePrac1_1">
      <ImageComponent name="image_6">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$prePracTargetImg1" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="image_6" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$(xPosition, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="set every repeat" val="$(width*x_scale,height*y_scale)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <TextComponent name="text_8">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_8" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <ImageComponent name="image_7">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$prePracProbeImg1" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="image_7" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$(xPosition, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="set every repeat" val="$(width*x_scale,height*y_scale)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.8" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
    </Routine>
    <Routine name="prePrac3_2">
      <ImageComponent name="image_8">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$prePracTargetImg2" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="image_8" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$(xPosition, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="set every repeat" val="$(width*x_scale,height*y_scale)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <TextComponent name="text_9">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_9" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <ImageComponent name="image_9">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$prePracProbeImg2" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="image_9" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$(xPosition, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="set every repeat" val="$(width*x_scale,height*y_scale)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.8" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
    </Routine>
    <Routine name="check_scale">
      <CodeComponent name="code_13">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="width_card = 8.5&amp;#10;height_card = 5.2" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="width_card = 8.5;&amp;#10;height_card = 5.2;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_13" valType="code"/>
      </CodeComponent>
      <PolygonComponent name="polygon">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="polygon" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="set every repeat" val="$(height_card*x_scale,width_card*y_scale)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="10" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
    </Routine>
    <Routine name="ITI_fix">
      <CodeComponent name="code_14">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if ((fix_switch[trialID] === 1)) {&amp;#10;    if ((fix_color === &quot;white&quot;)) {&amp;#10;        fix_color = fix_color_options[1];&amp;#10;        corrFix_resp = &quot;space&quot;;&amp;#10;    } else {&amp;#10;        fix_color = fix_color_options[0];&amp;#10;        corrFix_resp = &quot;space&quot;;&amp;#10;    }&amp;#10;} else {&amp;#10;    fix_color = fix_color;&amp;#10;    corrFix_resp = undefined;&amp;#10;}&amp;#10;a = 1.25;&amp;#10;b = 1.75;&amp;#10;fixDur = (((b - a) * random()) + a);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if fix_switch[trialID] == 1:&amp;#10;    if fix_color == &quot;white&quot;:&amp;#10;        fix_color = fix_color_options[1]&amp;#10;        corrFix_resp = 'space'&amp;#10;    else:&amp;#10;        fix_color = fix_color_options[0]&amp;#10;        corrFix_resp = 'space'&amp;#10;else:&amp;#10;    fix_color = fix_color&amp;#10;    corrFix_resp = None&amp;#10;&amp;#10;a = 1.25 # min ITI&amp;#10;b = 1.75 # max ITI&amp;#10;fixDur = (b-a) * random()+a" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if ((fix_switch[trialID] === 1)) {&amp;#10;    if ((fix_resp.keys === corrFix_resp)) {&amp;#10;        corrFix_count = (corrFix_count + 1);&amp;#10;    } else {&amp;#10;        missFix_count = (missFix_count + 1);&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;&amp;#10;console.log(corrFix_count)&amp;#10;console.log(missFix_count)" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="if fix_switch[trialID] == 1:&amp;#10;    if fix_resp.corr == 1:&amp;#10;        corrFix_count = corrFix_count + 1&amp;#10;    else:&amp;#10;        missFix_count = missFix_count + 1" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_14" valType="code"/>
      </CodeComponent>
      <TextComponent name="ITI_fix_cross">
        <Param name="color" updates="set every repeat" val="$fix_color" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="ITI_fix_cross" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="$fixDur" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="fix_resp">
        <Param name="allowedKeys" updates="constant" val="'space'," valType="code"/>
        <Param name="correctAns" updates="constant" val="$corrFix_resp" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="fix_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="$fixDur" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="prac_target_slow">
      <CodeComponent name="code_7">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="xPosition = &quot;&quot;;&amp;#10;if ((which_first[0] === 0)) {&amp;#10;    if ((pTrial &lt; 8)) {&amp;#10;        prac_paths = allHs;&amp;#10;        prac_paths = allHs;&amp;#10;    } else {&amp;#10;        if ((pTrial &gt; 7)) {&amp;#10;            prac_paths = allFs;&amp;#10;            prac_paths = allFs;&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((which_first[0] === 1)) {&amp;#10;        if ((pTrial &lt; 8)) {&amp;#10;            prac_paths = allFs;&amp;#10;            prac_paths = allFs;&amp;#10;        } else {&amp;#10;            if ((pTrial &gt; 7)) {&amp;#10;                prac_paths = allHs;&amp;#10;                prac_paths = allHs;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;if ((pFixs[pBlockTrial] === 1)) {&amp;#10;    corrPfix = &quot;space&quot;;&amp;#10;    if ((pfix_color === &quot;white&quot;)) {&amp;#10;        pfix_color = pfix_color_options[1];&amp;#10;    } else {&amp;#10;        pfix_color = pfix_color_options[0];&amp;#10;    }&amp;#10;} else {&amp;#10;    pfix_color = pfix_color;&amp;#10;    corrPfix = undefined;&amp;#10;}&amp;#10;&amp;#10;&amp;#10;&amp;#10;if ((ptrial_order[pTrial] === 0)) {&amp;#10;    prac_target = prac_paths[samepTrials[sameCount]];&amp;#10;    prac_probe = prac_paths[samepTrials[sameCount]];&amp;#10;    if ((Number.parseInt(expInfo[&quot;design&quot;]) &lt; 5)) {&amp;#10;        pracCorr = &quot;f&quot;;&amp;#10;    } else {&amp;#10;        if ((Number.parseInt(expInfo[&quot;design&quot;]) &gt; 4)) {&amp;#10;            pracCorr = &quot;j&quot;;&amp;#10;        }&amp;#10;    }&amp;#10;    sameCount = (sameCount + 1);&amp;#10;} else {&amp;#10;    if ((ptrial_order[pTrial] === 1)) {&amp;#10;        prac_target = prac_paths[diffpTrials[diffCount][0]];&amp;#10;        prac_probe = prac_paths[diffpTrials[diffCount][1]];&amp;#10;        if ((Number.parseInt(expInfo[&quot;design&quot;]) &lt; 5)) {&amp;#10;            pracCorr = &quot;j&quot;;&amp;#10;        } else {&amp;#10;            if ((Number.parseInt(expInfo[&quot;design&quot;]) &gt; 4)) {&amp;#10;                pracCorr = &quot;f&quot;;&amp;#10;            }&amp;#10;        }&amp;#10;        diffCount = (diffCount + 1);&amp;#10;    } else {&amp;#10;        console.log(&quot;What is going on&quot;);&amp;#10;    }&amp;#10;}&amp;#10;if ((Number.parseInt(expInfo[&quot;position&quot;]) === 0)) {&amp;#10;    xPosition = 0;&amp;#10;} else {&amp;#10;    if ((Number.parseInt(expInfo[&quot;position&quot;]) === 2)) {&amp;#10;        if ((ptrial_order[pTrial] === 1)) {&amp;#10;            if ((side_same_prac[samePTrialid] === 1)) {&amp;#10;                xPosition = (- (width4deg * x_scale));&amp;#10;            } else {&amp;#10;                if ((side_same_prac[samePTrialid] === 0)) {&amp;#10;                    xPosition = (width4deg * x_scale);&amp;#10;                }&amp;#10;            }&amp;#10;            samePTrialid += 1;&amp;#10;        } else {&amp;#10;            if ((ptrial_order[pTrial] === 0)) {&amp;#10;                if ((side_diff_prac[diffPTrialid] === 1)) {&amp;#10;                    xPosition = (- (width4deg * x_scale));&amp;#10;                } else {&amp;#10;                    if ((side_diff_prac[diffPTrialid] === 0)) {&amp;#10;                        xPosition = (width4deg * x_scale);&amp;#10;                    }&amp;#10;                }&amp;#10;                diffPTrialid += 1;&amp;#10;            }&amp;#10;        }&amp;#10;    } else {&amp;#10;        if ((Number.parseInt(expInfo[&quot;position&quot;]) === 1)) {&amp;#10;            xPosition = (- (width4deg * x_scale));&amp;#10;        } else {&amp;#10;            if ((Number.parseInt(expInfo[&quot;position&quot;]) === 3)) {&amp;#10;                xPosition = (width4deg * x_scale);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;thisExp.addData(&quot;pfix_switches&quot;, pFixs[pBlockTrial]);&amp;#10;thisExp.addData(&quot;Pside&quot;, xPosition);&amp;#10;thisExp.addData(&quot;ptrial_type1S0D&quot;, ptrial_order[pTrial]);&amp;#10;thisExp.addData(&quot;ptarget&quot;, prac_target);&amp;#10;thisExp.addData(&quot;pprobe&quot;, prac_probe);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="xPosition =''&amp;#10;&amp;#10;if which_first[0] == 0:&amp;#10;    if pTrial &lt; 8:&amp;#10;        prac_paths = allHs&amp;#10;        prac_paths = allHs&amp;#10;    elif pTrial &gt; 7:&amp;#10;        prac_paths = allFs&amp;#10;        prac_paths = allFs&amp;#10;elif which_first[0] == 1:&amp;#10;    if pTrial &lt; 8:&amp;#10;        prac_paths = allFs&amp;#10;        prac_paths = allFs&amp;#10;    elif pTrial &gt; 7:&amp;#10;        prac_paths = allHs&amp;#10;        prac_paths = allHs&amp;#10;&amp;#10;if pFixs[pBlockTrial] == 1:&amp;#10;    corrPfix = 'space'&amp;#10;    if pfix_color == &quot;white&quot;:&amp;#10;        pfix_color = pfix_color_options[1]&amp;#10;    else:&amp;#10;        pfix_color = pfix_color_options[0]&amp;#10;else:&amp;#10;    pfix_color = pfix_color&amp;#10;    corrPfix = None&amp;#10;&amp;#10;if ptrial_order[pTrial] == 0:&amp;#10;    prac_target = prac_paths[samepTrials[sameCount]]&amp;#10;    prac_probe = prac_paths[samepTrials[sameCount]]&amp;#10;    if int(expInfo['design']) &lt; 5:&amp;#10;        pracCorr = 'f'&amp;#10;    elif int(expInfo['design']) &gt; 4:&amp;#10;        pracCorr = 'j'&amp;#10;    sameCount = sameCount + 1&amp;#10;elif ptrial_order[pTrial] == 1:&amp;#10;    prac_target = prac_paths[diffpTrials[diffCount][0]]&amp;#10;    prac_probe = prac_paths[diffpTrials[diffCount][1]]&amp;#10;    if int(expInfo['design']) &lt; 5:&amp;#10;        pracCorr = 'j'&amp;#10;    elif int(expInfo['design']) &gt; 4:&amp;#10;        pracCorr = 'f'&amp;#10;    diffCount = diffCount + 1&amp;#10;else:&amp;#10;    print('What is going on')&amp;#10;&amp;#10;if int(expInfo['position']) == 0:&amp;#10;    xPosition = 0&amp;#10;elif int(expInfo['position']) == 2:&amp;#10;    if ptrial_order[pTrial]==1:&amp;#10;        if side_same_prac[samePTrialid] == 1: #left&amp;#10;            xPosition = -(width4deg*x_scale)&amp;#10;        elif side_same_prac[samePTrialid] == 0: #right&amp;#10;            xPosition = width4deg*x_scale&amp;#10;        samePTrialid += 1&amp;#10;    elif ptrial_order[pTrial]==0:&amp;#10;        if side_diff_prac[diffPTrialid] == 1: #left&amp;#10;            xPosition = -(width4deg*x_scale)&amp;#10;        elif side_diff_prac[diffPTrialid] == 0: #right&amp;#10;            xPosition = width4deg*x_scale&amp;#10;        diffPTrialid += 1&amp;#10;elif int(expInfo['position']) == 1:&amp;#10;    xPosition = -(width4deg*x_scale)&amp;#10;elif int(expInfo['position']) == 3:&amp;#10;    xPosition = width4deg*x_scale&amp;#10;&amp;#10;thisExp.addData('pfix_switches', pFixs[pBlockTrial])&amp;#10;thisExp.addData('Pside', xPosition)&amp;#10;thisExp.addData('ptrial_type1S0D',ptrial_order[pTrial])&amp;#10;thisExp.addData('ptarget',prac_target)&amp;#10;thisExp.addData('pprobe',prac_probe)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_7" valType="code"/>
      </CodeComponent>
      <ImageComponent name="image">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$prac_target" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="image" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$(xPosition, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="set every repeat" val="$(width*x_scale,height*y_scale)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <TextComponent name="text_6">
        <Param name="color" updates="set every repeat" val="$pfix_color" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_6" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.8" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="prac_probe_slow">
      <ImageComponent name="image_2">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$prac_probe" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="image_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$(xPosition, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="set every repeat" val="$(width*x_scale,height*y_scale)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <TextComponent name="text_7">
        <Param name="color" updates="set every repeat" val="$pfix_color" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_7" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="prac_resp">
        <Param name="allowedKeys" updates="constant" val="'f','j'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$pracCorr" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="prac_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="4.8" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <KeyboardComponent name="prac_fix_resp">
        <Param name="allowedKeys" updates="constant" val="'space'," valType="code"/>
        <Param name="correctAns" updates="constant" val="$corrPfix" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="prac_fix_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="4.8" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="prac_target_fast">
      <CodeComponent name="code_15">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="xPosition = &quot;&quot;;&amp;#10;&amp;#10;&amp;#10;if ((pFixs[pBlockTrial] === 1)) {&amp;#10;    corrPfix = &quot;space&quot;;&amp;#10;    if ((pfix_color === &quot;white&quot;)) {&amp;#10;        pfix_color = pfix_color_options[1];&amp;#10;    } else {&amp;#10;        pfix_color = pfix_color_options[0];&amp;#10;    }&amp;#10;} else {&amp;#10;    pfix_color = pfix_color;&amp;#10;    corrPfix = undefined;&amp;#10;}&amp;#10;&amp;#10;&amp;#10;if ((ptrial_order[pTrial] === 0)) {&amp;#10;    prac_target = prac_paths[samepTrials[sameCount]];&amp;#10;    prac_probe = prac_paths[samepTrials[sameCount]];&amp;#10;    if ((Number.parseInt(expInfo[&quot;design&quot;]) &lt; 5)) {&amp;#10;        pracCorr = &quot;f&quot;;&amp;#10;    } else {&amp;#10;        if ((Number.parseInt(expInfo[&quot;design&quot;]) &gt; 4)) {&amp;#10;            pracCorr = &quot;j&quot;;&amp;#10;        }&amp;#10;    }&amp;#10;    sameCount = (sameCount + 1);&amp;#10;} else {&amp;#10;    if ((ptrial_order[pTrial] === 1)) {&amp;#10;        prac_target = prac_paths[diffpTrials[diffCount][0]];&amp;#10;        prac_probe = prac_paths[diffpTrials[diffCount][1]];&amp;#10;        if ((Number.parseInt(expInfo[&quot;design&quot;]) &lt; 5)) {&amp;#10;            pracCorr = &quot;j&quot;;&amp;#10;        } else {&amp;#10;            if ((Number.parseInt(expInfo[&quot;design&quot;]) &gt; 4)) {&amp;#10;                pracCorr = &quot;f&quot;;&amp;#10;            }&amp;#10;        }&amp;#10;        diffCount = (diffCount + 1);&amp;#10;    } else {&amp;#10;        console.log(&quot;What is going on&quot;);&amp;#10;    }&amp;#10;}&amp;#10;if ((Number.parseInt(expInfo[&quot;position&quot;]) === 0)) {&amp;#10;    xPosition = 0;&amp;#10;} else {&amp;#10;    if ((Number.parseInt(expInfo[&quot;position&quot;]) === 2)) {&amp;#10;        if ((ptrial_order[pTrial] === 1)) {&amp;#10;            if ((side_same_prac[samePTrialid] === 1)) {&amp;#10;                xPosition = (- (width4deg * x_scale));&amp;#10;            } else {&amp;#10;                if ((side_same_prac[samePTrialid] === 0)) {&amp;#10;                    xPosition = (width4deg * x_scale);&amp;#10;                }&amp;#10;            }&amp;#10;            samePTrialid += 1;&amp;#10;        } else {&amp;#10;            if ((ptrial_order[pTrial] === 0)) {&amp;#10;                if ((side_diff_prac[diffPTrialid] === 1)) {&amp;#10;                    xPosition = (- (width4deg * x_scale));&amp;#10;                } else {&amp;#10;                    if ((side_diff_prac[diffPTrialid] === 0)) {&amp;#10;                        xPosition = (width4deg * x_scale);&amp;#10;                    }&amp;#10;                }&amp;#10;                diffPTrialid += 1;&amp;#10;            }&amp;#10;        }&amp;#10;    } else {&amp;#10;        if ((Number.parseInt(expInfo[&quot;position&quot;]) === 1)) {&amp;#10;            xPosition = (- (width4deg * x_scale));&amp;#10;        } else {&amp;#10;            if ((Number.parseInt(expInfo[&quot;position&quot;]) === 3)) {&amp;#10;                xPosition = (width4deg * x_scale);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;thisExp.addData(&quot;pfix_switches&quot;, pFixs[pBlockTrial]);&amp;#10;thisExp.addData(&quot;Pside&quot;, xPosition);&amp;#10;thisExp.addData(&quot;ptrial_type1S0D&quot;, ptrial_order[pTrial]);&amp;#10;thisExp.addData(&quot;ptarget&quot;, prac_target);&amp;#10;thisExp.addData(&quot;pprobe&quot;, prac_probe);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="xPosition =''&amp;#10;&amp;#10;if pFixs[pBlockTrial] == 1:&amp;#10;    corrPfix = 'space'&amp;#10;    if pfix_color == &quot;white&quot;:&amp;#10;        pfix_color = pfix_color_options[1]&amp;#10;    else:&amp;#10;        pfix_color = pfix_color_options[0]&amp;#10;else:&amp;#10;    pfix_color = pfix_color&amp;#10;    corrPfix = None&amp;#10;&amp;#10;if ptrial_order[pTrial] == 0:&amp;#10;    prac_target = prac_paths[samepTrials[sameCount]]&amp;#10;    prac_probe = prac_paths[samepTrials[sameCount]]&amp;#10;    if int(expInfo['design']) &lt; 5:&amp;#10;        pracCorr = 'f'&amp;#10;    elif int(expInfo['design']) &gt; 4:&amp;#10;        pracCorr = 'j'&amp;#10;    sameCount = sameCount + 1&amp;#10;elif ptrial_order[pTrial] == 1:&amp;#10;    prac_target = prac_paths[diffpTrials[diffCount][0]]&amp;#10;    prac_probe = prac_paths[diffpTrials[diffCount][1]]&amp;#10;    if int(expInfo['design']) &lt; 5:&amp;#10;        pracCorr = 'j'&amp;#10;    elif int(expInfo['design']) &gt; 4:&amp;#10;        pracCorr = 'f'&amp;#10;    diffCount = diffCount + 1&amp;#10;else:&amp;#10;    print('What is going on')&amp;#10;&amp;#10;if int(expInfo['position']) == 0:&amp;#10;    xPosition = 0&amp;#10;elif int(expInfo['position']) == 2:&amp;#10;    if ptrial_order[pTrial]==1:&amp;#10;        if side_same_prac[samePTrialid] == 1: #left&amp;#10;            xPosition = -(width4deg*x_scale)&amp;#10;        elif side_same_prac[samePTrialid] == 0: #right&amp;#10;            xPosition = width4deg*x_scale&amp;#10;        samePTrialid += 1&amp;#10;    elif ptrial_order[pTrial]==0:&amp;#10;        if side_diff_prac[diffPTrialid] == 1: #left&amp;#10;            xPosition = -(width4deg*x_scale)&amp;#10;        elif side_diff_prac[diffPTrialid] == 0: #right&amp;#10;            xPosition = width4deg*x_scale&amp;#10;        diffPTrialid += 1&amp;#10;elif int(expInfo['position']) == 1:&amp;#10;    xPosition = -(width4deg*x_scale)&amp;#10;elif int(expInfo['position']) == 3:&amp;#10;    xPosition = width4deg*x_scale&amp;#10;&amp;#10;thisExp.addData('pfix_switches', pFixs[pBlockTrial])&amp;#10;thisExp.addData('Pside', xPosition)&amp;#10;thisExp.addData('ptrial_type1S0D',ptrial_order[pTrial])&amp;#10;thisExp.addData('ptarget',prac_target)&amp;#10;thisExp.addData('pprobe',prac_probe)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_15" valType="code"/>
      </CodeComponent>
      <ImageComponent name="image_4">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$prac_target" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="image_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$(xPosition, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="set every repeat" val="$(width*x_scale,height*y_scale)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <TextComponent name="text_10">
        <Param name="color" updates="set every repeat" val="$pfix_color" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_10" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="prac_probe_fast">
      <ImageComponent name="image_5">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$prac_probe" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="image_5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$(xPosition, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="set every repeat" val="$(width*x_scale,height*y_scale)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <TextComponent name="text_11">
        <Param name="color" updates="set every repeat" val="$pfix_color" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_11" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="prac_fix_resp_fast">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$corrPfix" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="prac_fix_resp_fast" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="4.8" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <KeyboardComponent name="prac_resp2">
        <Param name="allowedKeys" updates="constant" val="'f','j'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$pracCorr" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="prac_resp2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="4.8" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="fast_warning">
      <TextComponent name="transition">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="transition" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Good job! &amp;#10;&amp;#10;Now the pictures are going to go a little faster. &amp;#10;&amp;#10;" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="code_17">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="pBlockTrial = 0;&amp;#10;function shuffle_array(array) {&amp;#10;    for (let i = array.length - 1; i &gt; 0; i--) {&amp;#10;        let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i&amp;#10;&amp;#10;            // swap elements array[i] and array[j]&amp;#10;            // we use &quot;destructuring assignment&quot; syntax to achieve that&amp;#10;            // you'll find more details about that syntax in later chapters&amp;#10;            // same can be written as:&amp;#10;            // let t = array[i]; array[i] = array[j]; array[j] = t&amp;#10;        [array[i], array[j]] = [array[j], array[i]];&amp;#10;    }&amp;#10;    return array&amp;#10;}&amp;#10;&amp;#10;pFixs = [0,shuffle_array([0,1]),0].flat();&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="pBlockTrial = 0&amp;#10;&amp;#10;pFixSwitch = [0,1]&amp;#10;shuffle(pFixSwitch)&amp;#10;pFixs = [0] + pFixSwitch + [0]&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_17" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="prac_intro">
      <CodeComponent name="code_16">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="function shuffle_array(array) {&amp;#10;    for (let i = array.length - 1; i &gt; 0; i--) {&amp;#10;        let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i&amp;#10;&amp;#10;            // swap elements array[i] and array[j]&amp;#10;            // we use &quot;destructuring assignment&quot; syntax to achieve that&amp;#10;            // you'll find more details about that syntax in later chapters&amp;#10;            // same can be written as:&amp;#10;            // let t = array[i]; array[i] = array[j]; array[j] = t&amp;#10;        [array[i], array[j]] = [array[j], array[i]];&amp;#10;    }&amp;#10;    return array&amp;#10;}&amp;#10;&amp;#10;pFixs = [0,shuffle_array([0,1]),0].flat();&amp;#10;&amp;#10;if ((Number.parseInt(expInfo[&quot;design&quot;]) &lt; 5)) {&amp;#10;    if ((which_first[0] === 1)) {&amp;#10;        if ((pTrial &lt; 8)) {&amp;#10;            prac_intro_msg = &quot;This practice is with the Smith sisters. \n\nRemember, if you see the same sister, press F. If you see two different sisters, press J.&quot;;&amp;#10;        } else {&amp;#10;            prac_intro_msg = &quot;Good job! This practice is with the neighborhood houses. \n\nIf you see the same house, press F. If you see two different houses, press J.&quot;;&amp;#10;        }&amp;#10;    } else {&amp;#10;        if ((which_first[0] === 0)) {&amp;#10;            if ((pTrial &lt; 8)) {&amp;#10;                prac_intro_msg = &quot;This practice is with the neighborhood houses. \n\nRemember, if you see \nthe same house, press F. If you see two different houses, press J.&quot;;&amp;#10;            } else {&amp;#10;                prac_intro_msg = &quot;Good job! This practice is with the Smith sisters. \n\nIf you see the same sister, press F. If you see two different sisters, press J.&quot;;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((Number.parseInt(expInfo[&quot;design&quot;]) &gt; 4)) {&amp;#10;        if ((which_first[0] === 1)) {&amp;#10;            if ((pTrial &lt; 8)) {&amp;#10;                prac_intro_msg = &quot;This practice is with the Smith sisters. \n\nRemember, if you see the same sister, press J. If you see two different sisters, press F.&quot;;&amp;#10;            } else {&amp;#10;                prac_intro_msg = &quot;Good job! This practice with the houses in their neighborhood. \n\nIf you see the same house, press J. \nIf you see two different houses, press F.&quot;;&amp;#10;            }&amp;#10;        } else {&amp;#10;            if ((which_first[0] === 0)) {&amp;#10;                if ((pTrial &lt; 8)) {&amp;#10;                    prac_intro_msg = &quot;This practice is with the houses in the Smith's neighborhood. \n\nRemember, if you see the same house, press J. If you see two different houses, press F.&quot;;&amp;#10;                } else {&amp;#10;                    prac_intro_msg = &quot;Good job! This practice is with the Smith sisters. \n\nIf you see the same sister, press J. If you see two different sisters, press F.&quot;;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;pBlockTrial = 0;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="pFixSwitch = [0,1]&amp;#10;shuffle(pFixSwitch)&amp;#10;pFixs = [0] + pFixSwitch + [0]&amp;#10;&amp;#10;if int(expInfo['design']) &lt; 5:&amp;#10;    if which_first[0] == 1:&amp;#10;        if pTrial &lt; 8:&amp;#10;            prac_intro_msg = 'This practice is with the Smith sisters. \nRemember, if you see the same sister, press F. \nIf you see two different sisters, press J.'&amp;#10;        else:&amp;#10;            prac_intro_msg = 'Good job! Now we are going to practice with the houses in their neighborhood. \nIf you see the same house, press F. \nIf you see two different houses, press J.'&amp;#10;    elif which_first[0] == 0:&amp;#10;        if pTrial &lt; 8:&amp;#10;            prac_intro_msg = 'This practice is with the houses in the Smith\'s neighborhood. \nRemember, if you see \nthe same house, press F. \nIf you see two different houses, press J.'&amp;#10;        else:&amp;#10;            prac_intro_msg = 'Good job! This practice is with the Smith sisters. \nIf you see the same sister, press F. \nIf you see two different sisters, press J.'&amp;#10;elif int(expInfo['design']) &gt; 4:&amp;#10;    if which_first[0] == 1:&amp;#10;        if pTrial &lt; 8:&amp;#10;            prac_intro_msg = 'This practice is with the Smith sisters. \nRemember, if you see the same sister, press J. \nIf you see two different sisters, press F.'&amp;#10;        else:&amp;#10;            prac_intro_msg = 'Good job! Now we are going to practice with the houses in their neighborhood. \nIf you see the same house, press J. \nIf you see two different houses, press F.'&amp;#10;    elif which_first[0] == 0:&amp;#10;        if pTrial &lt; 8:&amp;#10;            prac_intro_msg = 'This practice is with the houses in the Smith\'s neighborhood. \nRemember, if you see \nthe same house, press J. \nIf you see two different houses, press F.'&amp;#10;        else:&amp;#10;            prac_intro_msg = 'Good job! This practice is with the Smith sisters. \nIf you see the same sister, press J. \nIf you see two different sisters, press F.'&amp;#10;&amp;#10;&amp;#10;pBlockTrial = 0" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_16" valType="code"/>
      </CodeComponent>
      <TextComponent name="text_12">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.06" valType="code"/>
        <Param name="name" updates="None" val="text_12" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="7" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$prac_intro_msg" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="intro_task">
      <TextComponent name="text_13">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_13" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="In this game, you are going to  see pictures of the Smith family  and the houses in their neighborhood.&amp;#10;&amp;#10;Press &lt;Space&gt; to see what they look like!" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_10">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_10" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="1" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="intro_images">
      <ImageComponent name="image_10">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="Designs/smith_sisters.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="image_10" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="constant" val="(0.75*1.77, 0.75)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="5.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <ImageComponent name="image_11">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="Designs/smith_houses.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="image_11" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="constant" val="(0.75*1.77, 0.75)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="6" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="5.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
    </Routine>
    <Routine name="prePrac1">
      <CodeComponent name="code_8">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="prePrac1 = 'Designs/prac_instr1.png'&amp;#10;&amp;#10;all_paths_prac = ['Stimuli/H8sim0.png', 'Stimuli/H7sim0.png', 'Stimuli/H6sim0.png', 'Stimuli/H5sim0.png', 'Stimuli/H-8sim0.png', 'Stimuli/H-8sim1.png', 'Stimuli/H-8sim2.png', 'Stimuli/H-8sim3.png', 'Stimuli/eomu.png', 'Stimuli/eumu.png', 'Stimuli/edmd.png', 'Stimuli/eimd.png', 'Stimuli/f15.png', 'Stimuli/f24.png', 'Stimuli/f131.png', 'Stimuli/f142.png']&amp;#10;feat_H_paths_prac = ['Stimuli/H8sim0.png', 'Stimuli/H7sim0.png', 'Stimuli/H6sim0.png', 'Stimuli/H5sim0.png']&amp;#10;conf_H_paths_prac = ['Stimuli/H-8sim0.png', 'Stimuli/H-8sim1.png', 'Stimuli/H-8sim2.png', 'Stimuli/H-8sim3.png']&amp;#10;feat_F_paths_prac = ['Stimuli/eomu.png', 'Stimuli/eumu.png', 'Stimuli/edmd.png', 'Stimuli/eimd.png']&amp;#10;conf_F_paths_prac = ['Stimuli/f15.png', 'Stimuli/f24.png', 'Stimuli/131.png', 'Stimuli/142.png']&amp;#10;&amp;#10;allHs = all_paths_prac[0:8]&amp;#10;shuffle(allHs)&amp;#10;allFs = all_paths_prac[8:16]&amp;#10;shuffle(allFs)&amp;#10;which_first = [0,1]&amp;#10;shuffle(which_first)&amp;#10;&amp;#10;if which_first[0] == 0:&amp;#10;    prePracTargetImg1 = allHs[0]&amp;#10;    prePracProbeImg1 = allHs[1]&amp;#10;elif which_first[0] == 1:&amp;#10;    prePracTargetImg1 = allFs[0]&amp;#10;    prePracProbeImg1 = allFs[1]&amp;#10;&amp;#10;if int(expInfo['position']) == 0:&amp;#10;    xPosition = 0&amp;#10;elif int(expInfo['position']) == 2:&amp;#10;    xPosition = (width4deg*x_scale)&amp;#10;elif int(expInfo['position']) == 1:&amp;#10;    xPosition = -(width4deg*x_scale)&amp;#10;elif int(expInfo['position']) == 3:&amp;#10;    xPosition = width4deg*x_scale" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="prePrac1 = &quot;Designs/prac_instr1.png&quot;;&amp;#10;all_paths_prac = [&quot;Stimuli/H8sim0.png&quot;, &quot;Stimuli/H7sim0.png&quot;, &quot;Stimuli/H6sim0.png&quot;, &quot;Stimuli/H5sim0.png&quot;, &quot;Stimuli/H-8sim0.png&quot;, &quot;Stimuli/H-8sim1.png&quot;, &quot;Stimuli/H-8sim2.png&quot;, &quot;Stimuli/H-8sim3.png&quot;, &quot;Stimuli/eomu.png&quot;, &quot;Stimuli/eumu.png&quot;, &quot;Stimuli/edmd.png&quot;, &quot;Stimuli/eimd.png&quot;, &quot;Stimuli/f15.png&quot;, &quot;Stimuli/f24.png&quot;, &quot;Stimuli/f131.png&quot;, &quot;Stimuli/f142.png&quot;];&amp;#10;feat_H_paths_prac = [&quot;Stimuli/H8sim0.png&quot;, &quot;Stimuli/H7sim0.png&quot;, &quot;Stimuli/H6sim0.png&quot;, &quot;Stimuli/H5sim0.png&quot;];&amp;#10;conf_H_paths_prac = [&quot;Stimuli/H-8sim0.png&quot;, &quot;Stimuli/H-8sim1.png&quot;, &quot;Stimuli/H-8sim2.png&quot;, &quot;Stimuli/H-8sim3.png&quot;];&amp;#10;feat_F_paths_prac = [&quot;Stimuli/eomu.png&quot;, &quot;Stimuli/eumu.png&quot;, &quot;Stimuli/edmd.png&quot;, &quot;Stimuli/eimd.png&quot;];&amp;#10;conf_F_paths_prac = [&quot;Stimuli/f15.png&quot;, &quot;Stimuli/f24.png&quot;, &quot;Stimuli/131.png&quot;, &quot;Stimuli/142.png&quot;];&amp;#10;allHs = all_paths_prac.slice(0, 8);&amp;#10;shuffle(allHs);&amp;#10;allFs = all_paths_prac.slice(8, 16);&amp;#10;shuffle(allFs);&amp;#10;which_first = [0, 1];&amp;#10;shuffle(which_first);&amp;#10;if ((which_first[0] === 0)) {&amp;#10;    prePracTargetImg1 = allHs[0];&amp;#10;    prePracProbeImg1 = allHs[1];&amp;#10;} else {&amp;#10;    if ((which_first[0] === 1)) {&amp;#10;        prePracTargetImg1 = allFs[0];&amp;#10;        prePracProbeImg1 = allFs[1];&amp;#10;    }&amp;#10;}&amp;#10;if ((Number.parseInt(expInfo[&quot;position&quot;]) === 0)) {&amp;#10;    xPosition = 0;&amp;#10;} else {&amp;#10;    if ((Number.parseInt(expInfo[&quot;position&quot;]) === 2)) {&amp;#10;        xPosition = (width4deg * x_scale);&amp;#10;    } else {&amp;#10;        if ((Number.parseInt(expInfo[&quot;position&quot;]) === 1)) {&amp;#10;            xPosition = (- (width4deg * x_scale));&amp;#10;        } else {&amp;#10;            if ((Number.parseInt(expInfo[&quot;position&quot;]) === 3)) {&amp;#10;                xPosition = (width4deg * x_scale);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_8" valType="code"/>
      </CodeComponent>
      <ImageComponent name="prac_instr1">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$prePrac1" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="prac_instr1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="constant" val="(0.75*1.77, 0.75)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_9">
        <Param name="allowedKeys" updates="constant" val="'space'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_9" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="2" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="prac_feedback_fast">
      <CodeComponent name="code_18">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="feedIM = &quot;&quot;;&amp;#10;if ((prac_resp2.corr === 1)) {&amp;#10;    if ((prac_fix_resp_fast.corr === 1)) {&amp;#10;        feedIM = &quot;Stimuli/greenCheck.png&quot;;&amp;#10;        prac_msg = &quot;Well done!&quot;;&amp;#10;    } else {&amp;#10;        numIncorr_fix = (numIncorr_fix + 1);&amp;#10;        feedIM = &quot;Stimuli/redWrong.png&quot;;&amp;#10;        if ((pFixs[pBlockTrial] === 1)) {&amp;#10;            prac_msg = &quot;Oops, you missed the cross change.&quot;;&amp;#10;        } else {&amp;#10;            prac_msg = &quot;Oops, you pressed space when the cross didn't change.&quot;;&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((prac_resp2.keys === undefined)) {&amp;#10;        feedIM = &quot;Stimuli/redWrong.png&quot;;&amp;#10;        numIncorr_miss = (numIncorr_miss + 1);&amp;#10;        if ((pFixs[pBlockTrial] === 1)) {&amp;#10;            numIncorr_fix = (numIncorr_fix + 1);&amp;#10;        }&amp;#10;        prac_msg = &quot;Oops, time ran out. That's ok, try again!&quot;;&amp;#10;    } else {&amp;#10;        if ((prac_fix_resp_fast.corr === 1)) {&amp;#10;            feedIM = &quot;Stimuli/redWrong.png&quot;;&amp;#10;            numIncorr_img = (numIncorr_img + 1);&amp;#10;            if ((pFixs[pBlockTrial] === 1)) {&amp;#10;                prac_msg = &quot;Good job! You got pressed space when the cross changed! But the picture response was wrong.&quot;;&amp;#10;            } else {&amp;#10;                prac_msg = &quot;Oops, the picture response was wrong.&quot;;&amp;#10;            }&amp;#10;        } else {&amp;#10;            numIncorr_img = (numIncorr_img + 1);&amp;#10;            numIncorr_fix = (numIncorr_fix + 1);&amp;#10;            feedIM = &quot;Stimuli/redWrong.png&quot;;&amp;#10;            if ((pFixs[pBlockTrial] === 1)) {&amp;#10;                prac_msg = &quot;Oops, you missed the cross change and the picture response was wrong.&quot;;&amp;#10;            } else {&amp;#10;                prac_msg = &quot;Oops, you press space when the cross didn't change and the picture response was wrong.&quot;;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="feedIM =''&amp;#10;if prac_resp2.corr == 1: &amp;#10;    if prac_fix_resp_fast.corr == 1:&amp;#10;        feedIM = 'Stimuli/greenCheck.png'&amp;#10;        prac_msg = 'Well done!'&amp;#10;    else:&amp;#10;        numIncorr_fix = numIncorr_fix + 1&amp;#10;        feedIM = 'Stimuli/redWrong.png'&amp;#10;        if pFixs[pBlockTrial] == 1:&amp;#10;            prac_msg = 'Oops, you missed the cross change.'&amp;#10;        else:&amp;#10;            prac_msg = 'Oops, you pressed space when the cross didn\'t change.'&amp;#10;else:&amp;#10;    if prac_resp2.keys == None:&amp;#10;        feedIM = 'Stimuli/redWrong.png'&amp;#10;        numIncorr_miss = numIncorr_miss + 1&amp;#10;        if pFixs[pBlockTrial] == 1:&amp;#10;            numIncorr_fix = numIncorr_fix + 1&amp;#10;        prac_msg = 'Oops, time ran out. That\'s ok, try again!' &amp;#10;    else:&amp;#10;        if prac_fix_resp_fast.corr == 1:&amp;#10;            feedIM = 'Stimuli/redWrong.png'&amp;#10;            numIncorr_img = numIncorr_img + 1&amp;#10;            if pFixs[pBlockTrial] == 1:&amp;#10;                prac_msg = 'Good job! You got pressed space when the cross changed! But the picture response was wrong.'&amp;#10;            else:&amp;#10;                prac_msg = 'Oops, the picture response was wrong.'&amp;#10;        else:&amp;#10;            numIncorr_img = numIncorr_img + 1&amp;#10;            numIncorr_fix = numIncorr_fix + 1&amp;#10;            feedIM = 'Stimuli/redWrong.png'&amp;#10;            if pFixs[pBlockTrial] == 1:&amp;#10;                prac_msg = 'Oops, you missed the cross change and the picture response was wrong.'&amp;#10;            else:&amp;#10;                prac_msg = 'Oops, you press space when the cross didn\'t change and the picture response was wrong.'" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="pTrial = (pTrial + 1);&amp;#10;pBlockTrial = (pBlockTrial + 1);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="pTrial = pTrial + 1&amp;#10;pBlockTrial = pBlockTrial + 1&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_18" valType="code"/>
      </CodeComponent>
      <ImageComponent name="image_12">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$feedIM" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="image_12" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="constant" val="(0.25, 0.25)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <TextComponent name="text_14">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_14" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -0.25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$prac_msg" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="prac_feedback_slow">
      <CodeComponent name="code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="feedIM = &quot;&quot;;&amp;#10;if ((prac_resp.corr === 1)) {&amp;#10;    if ((prac_fix_resp.corr === 1)) {&amp;#10;        feedIM = &quot;Stimuli/greenCheck.png&quot;;&amp;#10;        prac_msg = &quot;Well done!&quot;;&amp;#10;    } else {&amp;#10;        numIncorr_fix = (numIncorr_fix + 1);&amp;#10;        feedIM = &quot;Stimuli/redWrong.png&quot;;&amp;#10;        if ((pFixs[pBlockTrial] === 1)) {&amp;#10;            prac_msg = &quot;Oops, you missed the cross change.&quot;;&amp;#10;        } else {&amp;#10;            prac_msg = &quot;Oops, you pressed space when the cross didn't change.&quot;;&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((prac_resp.keys === undefined)) {&amp;#10;        feedIM = &quot;Stimuli/redWrong.png&quot;;&amp;#10;        numIncorr_miss = (numIncorr_miss + 1);&amp;#10;        if ((pFixs[pBlockTrial] === 1)) {&amp;#10;            numIncorr_fix = (numIncorr_fix + 1);&amp;#10;        }&amp;#10;        prac_msg = &quot;Oops, time ran out. That's ok, try again!&quot;;&amp;#10;    } else {&amp;#10;        if ((prac_fix_resp.corr === 1)) {&amp;#10;            feedIM = &quot;Stimuli/redWrong.png&quot;;&amp;#10;            numIncorr_img = (numIncorr_img + 1);&amp;#10;            if ((pFixs[pBlockTrial] === 1)) {&amp;#10;                prac_msg = &quot;Good job! You got pressed space when the cross changed! But the picture response was wrong.&quot;;&amp;#10;            } else {&amp;#10;                prac_msg = &quot;Oops, the picture response was wrong.&quot;;&amp;#10;            }&amp;#10;        } else {&amp;#10;            numIncorr_img = (numIncorr_img + 1);&amp;#10;            numIncorr_fix = (numIncorr_fix + 1);&amp;#10;            feedIM = &quot;Stimuli/redWrong.png&quot;;&amp;#10;            if ((pFixs[pBlockTrial] === 1)) {&amp;#10;                prac_msg = &quot;Oops, you missed the cross change and the picture response was wrong.&quot;;&amp;#10;            } else {&amp;#10;                prac_msg = &quot;Oops, you press space when the cross didn't change and the picture response was wrong.&quot;;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="feedIM =''&amp;#10;if prac_resp.corr == 1: &amp;#10;    if prac_fix_resp.corr == 1:&amp;#10;        feedIM = 'Stimuli/greenCheck.png'&amp;#10;        prac_msg = 'Well done!'&amp;#10;    else:&amp;#10;        numIncorr_fix = numIncorr_fix + 1&amp;#10;        feedIM = 'Stimuli/redWrong.png'&amp;#10;        if pFixs[pBlockTrial] == 1:&amp;#10;            prac_msg = 'Oops, you missed the cross change.'&amp;#10;        else:&amp;#10;            prac_msg = 'Oops, you pressed space when the cross didn\'t change.'&amp;#10;else:&amp;#10;    if prac_resp.keys == None:&amp;#10;        feedIM = 'Stimuli/redWrong.png'&amp;#10;        numIncorr_miss = numIncorr_miss + 1&amp;#10;        if pFixs[pBlockTrial] == 1:&amp;#10;            numIncorr_fix = numIncorr_fix + 1&amp;#10;        prac_msg = 'Oops, time ran out. That\'s ok, try again!' &amp;#10;    else:&amp;#10;        if prac_fix_resp.corr == 1:&amp;#10;            feedIM = 'Stimuli/redWrong.png'&amp;#10;            numIncorr_img = numIncorr_img + 1&amp;#10;            if pFixs[pBlockTrial] == 1:&amp;#10;                prac_msg = 'Good job! You got pressed space when the cross changed! But the picture response was wrong.'&amp;#10;            else:&amp;#10;                prac_msg = 'Oops, the picture response was wrong.'&amp;#10;        else:&amp;#10;            numIncorr_img = numIncorr_img + 1&amp;#10;            numIncorr_fix = numIncorr_fix + 1&amp;#10;            feedIM = 'Stimuli/redWrong.png'&amp;#10;            if pFixs[pBlockTrial] == 1:&amp;#10;                prac_msg = 'Oops, you missed the cross change and the picture response was wrong.'&amp;#10;            else:&amp;#10;                prac_msg = 'Oops, you press space when the cross didn\'t change and the picture response was wrong.'" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="pTrial = (pTrial + 1);&amp;#10;pBlockTrial = (pBlockTrial + 1);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="pTrial = pTrial + 1&amp;#10;pBlockTrial = pBlockTrial + 1&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code" valType="code"/>
      </CodeComponent>
      <ImageComponent name="image_3">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$feedIM" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="image_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="constant" val="(0.25, 0.25)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <TextComponent name="feedback_msg">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="feedback_msg" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -0.25)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$prac_msg" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="end_prac_loop">
      <CodeComponent name="code_19">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="repeatMsg = &quot;&quot;;&amp;#10;if ((((numIncorr_miss + numIncorr_img) &lt; 9) &amp;&amp; (numIncorr_fix &lt; 3))) {&amp;#10;    repeatMsg = ((((((&quot;Great job! \n\n Completed trials = &quot; + (16 - numIncorr_miss).toString()) + &quot; out of 16. \n Correct picture responses = &quot;) + (16 - numIncorr_img).toString()) + &quot; out of 16. \n Correct + responses = &quot;) + (4 - numIncorr_fix).toString()) + &quot; out of 4. \n\nYou are now ready for the real game. \nPress Space to see the instructions again.&quot;);&amp;#10;    repPracLoop.finished = true;&amp;#10;} else {&amp;#10;    if ((((numIncorr_fix &gt; 2) &amp;&amp; (numIncorr_img &lt; 7)) &amp;&amp; (numIncorr_miss &lt; 4))) {&amp;#10;        repeatMsg = ((((((((&quot;Good job! \n\n Completed trials = &quot; + (16 - numIncorr_miss).toString()) + &quot; out of 16. \n Correct picture responses = &quot;) + (16 - numIncorr_img).toString()) + &quot; out of 16. \n Correct + responses = &quot;) + (4 - numIncorr_fix).toString()) + &quot; out of 4. \n\nYou did great with the pictures! \n You missed &quot;) + numIncorr_fix.toString()) + &quot; of the 4 cross changes. \n In the real game, make sure you press Space as soon as you see it change!\n\n Let's try some more practice. \n Press Space to start.&quot;);&amp;#10;    } else {&amp;#10;        if ((((numIncorr_fix &lt; 3) &amp;&amp; (numIncorr_img &gt; 6)) &amp;&amp; (numIncorr_miss &lt; 4))) {&amp;#10;            repeatMsg = ((((((((((&quot;Good job! \n\n Completed trials = &quot; + (16 - numIncorr_miss).toString()) + &quot; out of 16. \n Correct picture responses = &quot;) + (16 - numIncorr_img).toString()) + &quot; out of 16. \n Correct + responses = &quot;) + (4 - numIncorr_fix).toString()) + &quot; out of 4. \n\nYou did , you got &quot;) + (2 - numIncorr_fix).toString()) + &quot; of the 4 cross changes! \nYou missed &quot;) + numIncorr_img.toString()) + &quot; of the pictures. \n Sometimes the faces and houses look almost the same, so try your best. \nMake sure you focus on the game and press the right keys! \n\nLet's try some more practice. \n Press Space to start.&quot;);&amp;#10;        } else {&amp;#10;            if ((((numIncorr_fix &lt; 3) &amp;&amp; (numIncorr_img &lt; 7)) &amp;&amp; (numIncorr_miss &gt; 3))) {&amp;#10;                repeatMsg = ((((((((&quot;Good job! \n\n Completed trials = &quot; + (16 - numIncorr_miss).toString()) + &quot; out of 16. \n Correct picture responses = &quot;) + (16 - numIncorr_img).toString()) + &quot; out of 16. \n Correct + responses = &quot;) + (4 - numIncorr_fix).toString()) + &quot; out of 4. \n\nYou missed &quot;) + numIncorr_miss.toString()) + &quot; of the trials because the time was up. That's ok, the real game will wait for you to respond, but try to go as fast as you can. \n\n Press Space to practice more.&quot;);&amp;#10;            } else {&amp;#10;                repeatMsg = ((((((((((((&quot;Nice try! \n\n Completed trials = &quot; + (16 - numIncorr_miss).toString()) + &quot; out of 16. \n Correct picture responses = &quot;) + (16 - numIncorr_img).toString()) + &quot; out of 16. \n Correct + responses = &quot;) + (4 - numIncorr_fix).toString()) + &quot; out of 4. \n\nYou missed &quot;) + numIncorr_img.toString()) + &quot; of the picture responses, &quot;) + numIncorr_fix.toString()) + &quot; of the 4 cross changes, and &quot;) + numIncorr_miss.toString()) + &quot; trials went by too fast. \n\nLet's try another round of practice. \nPress Space to start.&quot;);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="repeatMsg = ''&amp;#10; &amp;#10;if (numIncorr_miss + numIncorr_img) &lt; 9 and (numIncorr_fix &lt; 3):&amp;#10;    repeatMsg = 'Great job! \n\n Completed trials = ' + str(16 - numIncorr_miss) + ' out of 16. \n Correct picture responses = ' + str(16 - numIncorr_img) + ' out of 16. \n Correct + responses = ' + str(4-numIncorr_fix) + ' out of 4. \n\nYou are now ready for the real game. \nPress Space to see the instructions again.'&amp;#10;    repPracLoop.finished = True&amp;#10;else:&amp;#10;    if numIncorr_fix &gt; 2 and numIncorr_img &lt; 7 and numIncorr_miss &lt; 4:&amp;#10;        repeatMsg = 'Good job! \n\n Completed trials = ' + str(16 - numIncorr_miss) + ' out of 16. \n Correct picture responses = ' + str(16 - numIncorr_img) + ' out of 16. \n Correct + responses = ' + str(4-numIncorr_fix) + ' out of 4. \n\nYou did great with the pictures! \n You missed ' + str(numIncorr_fix) + ' of the 4 cross changes. \n In the real game, make sure you press Space as soon as you see it change!\n\n Let\'s try some more practice. \n Press Space to start.'&amp;#10;    elif numIncorr_fix &lt; 3 and numIncorr_img &gt; 6 and numIncorr_miss &lt; 4:&amp;#10;        repeatMsg = 'Good job! \n\n Completed trials = ' + str(16 - numIncorr_miss) + ' out of 16. \n Correct picture responses = ' + str(16 - numIncorr_img) + ' out of 16. \n Correct + responses = ' + str(4-numIncorr_fix) + ' out of 4. \n\nYou did , you got ' + str(2-numIncorr_fix) + ' of the 4 cross changes! \nYou missed ' + str(numIncorr_img) + ' of the pictures. \n Sometimes the faces and houses look almost the same, so try your best. \nMake sure you focus on the game and press the right keys! \n\nLet\'s try some more practice. \n Press Space to start.'&amp;#10;    elif numIncorr_fix &lt; 3 and numIncorr_img &lt; 7 and numIncorr_miss &gt; 3:&amp;#10;        repeatMsg = 'Good job! \n\n Completed trials = ' + str(16 - numIncorr_miss) + ' out of 16. \n Correct picture responses = ' + str(16 - numIncorr_img) + ' out of 16. \n Correct + responses = ' + str(4-numIncorr_fix) + ' out of 4. \n\nYou missed ' + str(numIncorr_miss) + ' of the trials because the time was up. That\'s ok, the real game will wait for you to respond, but try to go as fast as you can. \n\n Press Space to practice more.'&amp;#10;    else:&amp;#10;        repeatMsg = 'Nice try! \n\n Completed trials = ' + str(16 - numIncorr_miss) + ' out of 16. \n Correct picture responses = ' + str(16 - numIncorr_img) + ' out of 16. \n Correct + responses = ' + str(4-numIncorr_fix) + ' out of 4. \n\nYou missed ' + str(numIncorr_img) + ' of the picture responses, ' + str(numIncorr_fix) + ' of the 4 cross changes, and ' + str(numIncorr_miss) + ' trials went by too fast. \n\nLet\'s try another round of practice. \nPress Space to start.'" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_19" valType="code"/>
      </CodeComponent>
      <TextComponent name="text_15">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_15" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$repeatMsg" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_3">
        <Param name="allowedKeys" updates="constant" val="'space'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_3" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="screen_scale"/>
    <Routine name="intro_task"/>
    <Routine name="intro_images"/>
    <Routine name="prePrac1"/>
    <Routine name="prePrac1_1"/>
    <Routine name="prePrac2"/>
    <Routine name="prePrac3"/>
    <Routine name="prePrac3_2"/>
    <Routine name="prePrac4"/>
    <Routine name="prePrac5"/>
    <LoopInitiator loopType="TrialHandler" name="repPracLoop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="5" valType="code"/>
      <Param name="name" updates="None" val="repPracLoop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="prac_instructions"/>
    <LoopInitiator loopType="TrialHandler" name="pTrials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="2" valType="code"/>
      <Param name="name" updates="None" val="pTrials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="prac_intro"/>
    <LoopInitiator loopType="TrialHandler" name="pTrials_slow">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="$numPTrials_slow" valType="code"/>
      <Param name="name" updates="None" val="pTrials_slow" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="prac_target_slow"/>
    <Routine name="prac_probe_slow"/>
    <Routine name="prac_feedback_slow"/>
    <LoopTerminator name="pTrials_slow"/>
    <Routine name="fast_warning"/>
    <LoopInitiator loopType="TrialHandler" name="pTrials_fast">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="$numPTrials_fast" valType="code"/>
      <Param name="name" updates="None" val="pTrials_fast" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="prac_target_fast"/>
    <Routine name="prac_probe_fast"/>
    <Routine name="prac_feedback_fast"/>
    <LoopTerminator name="pTrials_fast"/>
    <LoopTerminator name="pTrials"/>
    <Routine name="end_prac_loop"/>
    <LoopTerminator name="repPracLoop"/>
    <Routine name="startInstruct"/>
    <LoopInitiator loopType="TrialHandler" name="blocks">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$design_file" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="2" valType="code"/>
      <Param name="name" updates="None" val="blocks" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="instrBlock"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="$numTrials" valType="code"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="target_img"/>
    <Routine name="ISI_fix"/>
    <Routine name="probe_img"/>
    <Routine name="trial_resp"/>
    <Routine name="ITI_fix"/>
    <LoopTerminator name="trials"/>
    <Routine name="feedback"/>
    <LoopTerminator name="blocks"/>
    <Routine name="EndScreen"/>
  </Flow>
</PsychoPy2experiment>
