<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2020.2.4">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': 'code', 'design': '1', 'position': '2'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="[]" valType="fileList"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1792, 1120]" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="configural_featural" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="debug" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="screen_scale">
      <CodeComponent name="code_JS">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="thisExp=psychoJS.experiment;&amp;#10;win=psychoJS.window;&amp;#10;event=psychoJS.eventManager;&amp;#10;Array.prototype.append = [].push;&amp;#10;shuffle = util.shuffle;&amp;#10;webbrowser=window;&amp;#10;&amp;#10;random=Math.random;&amp;#10;randint=function(min, maxplusone) {&amp;#10;    return Math.floor(Math.random() * (maxplusone - min) ) + min;&amp;#10;}&amp;#10;&amp;#10;round = function(num, n=0) {    &amp;#10;    return +(Math.round(num + (&quot;e+&quot; + n))  + (&quot;e-&quot; + n));&amp;#10;}&amp;#10;&amp;#10;function shuffle_array(array) {&amp;#10;    for (let i = array.length - 1; i &gt; 0; i--) {&amp;#10;        let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i&amp;#10;&amp;#10;            // swap elements array[i] and array[j]&amp;#10;            // we use &quot;destructuring assignment&quot; syntax to achieve that&amp;#10;            // you'll find more details about that syntax in later chapters&amp;#10;            // same can be written as:&amp;#10;            // let t = array[i]; array[i] = array[j]; array[j] = t&amp;#10;        [array[i], array[j]] = [array[j], array[i]];&amp;#10;    }&amp;#10;    return array&amp;#10;}&amp;#10;console.log(shuffle_array([1,2,3,3]))&amp;#10;&amp;#10;function divide_subPoint1(array, divisor) {&amp;#10;    let array_divided = array.map(function(element) {&amp;#10;        return element/divisor - 0.1;&amp;#10;    });&amp;#10;    return array_divided&amp;#10;}&amp;#10;&amp;#10;function round_array(array) {&amp;#10;    array = array.map(function(each_element){&amp;#10;        return Math.round(each_element);&amp;#10;    }); &amp;#10;    return array&amp;#10;}&amp;#10;&amp;#10;psychoJS.downloadResources([{name: (&quot;Stimuli/greenCheck.png&quot;), path:(&quot;Stimuli/greenCheck.png&quot;)},&amp;#10;{name: (&quot;Stimuli/redWrong.png&quot;), path:(&quot;Stimuli/redWrong.png&quot;)},&amp;#10;{name: (&quot;Stimuli/edmd.png&quot;), path:(&quot;Stimuli/edmd.png&quot;)},&amp;#10;{name: (&quot;Stimuli/eimd.png&quot;), path:(&quot;Stimuli/eimd.png&quot;)},&amp;#10;{name: (&quot;Stimuli/eomu.png&quot;), path:(&quot;Stimuli/eomu.png&quot;)},&amp;#10;{name: (&quot;Stimuli/eumu.png&quot;), path:(&quot;Stimuli/eumu.png&quot;)},&amp;#10;{name: (&quot;Stimuli/f15.png&quot;), path:(&quot;Stimuli/f15.png&quot;)},&amp;#10;{name: (&quot;Stimuli/f24.png&quot;), path:(&quot;Stimuli/f24.png&quot;)},&amp;#10;{name: (&quot;Stimuli/f131.png&quot;), path:(&quot;Stimuli/f131.png&quot;)},&amp;#10;{name: (&quot;Stimuli/f142.png&quot;), path:(&quot;Stimuli/f142.png&quot;)},&amp;#10;{name: (&quot;Stimuli/H-8sim0.png&quot;), path:(&quot;Stimuli/H-8sim0.png&quot;)},&amp;#10;{name: (&quot;Stimuli/H-8sim1.png&quot;), path:(&quot;Stimuli/H-8sim1.png&quot;)},&amp;#10;{name: (&quot;Stimuli/H-8sim2.png&quot;), path:(&quot;Stimuli/H-8sim2.png&quot;)},&amp;#10;{name: (&quot;Stimuli/H-8sim3.png&quot;), path:(&quot;Stimuli/H-8sim3.png&quot;)},&amp;#10;{name: (&quot;Stimuli/H5sim0.png&quot;), path:(&quot;Stimuli/H5sim0.png&quot;)},&amp;#10;{name: (&quot;Stimuli/H6sim0.png&quot;), path:(&quot;Stimuli/H6sim0.png&quot;)},&amp;#10;{name: (&quot;Stimuli/H7sim0.png&quot;), path:(&quot;Stimuli/H7sim0.png&quot;)},&amp;#10;{name: (&quot;Stimuli/H8sim0.png&quot;), path:(&quot;Stimuli/H8sim0.png&quot;)},&amp;#10;{name: (&quot;Designs/design1.csv&quot;), path:(&quot;Designs/design1.csv&quot;)},&amp;#10;{name: (&quot;Designs/design2.csv&quot;), path:(&quot;Designs/design2.csv&quot;)},&amp;#10;{name: (&quot;Designs/design3.csv&quot;), path:(&quot;Designs/design3.csv&quot;)},&amp;#10;{name: (&quot;Designs/design4.csv&quot;), path:(&quot;Designs/design4.csv&quot;)},&amp;#10;{name: (&quot;Designs/design5.csv&quot;), path:(&quot;Designs/design5.csv&quot;)},&amp;#10;{name: (&quot;Designs/design6.csv&quot;), path:(&quot;Designs/design6.csv&quot;)},&amp;#10;{name: (&quot;Designs/design7.csv&quot;), path:(&quot;Designs/design7.csv&quot;)},&amp;#10;{name: (&quot;Designs/design8.csv&quot;), path:(&quot;Designs/design8.csv&quot;)},&amp;#10;{name: (&quot;Designs/instructions_face_1234.png&quot;), path:(&quot;Designs/instructions_face_1234.png&quot;)},&amp;#10;{name: (&quot;Designs/instructions_face_5678.png&quot;), path:(&quot;Designs/instructions_face_5678.png&quot;)},&amp;#10;{name: (&quot;Designs/instructions_haus_1234.png&quot;), path:(&quot;Designs/instructions_haus_1234.png&quot;)},&amp;#10;{name: (&quot;Designs/instructions_haus_5678.png&quot;), path:(&quot;Designs/instructions_haus_5678.png&quot;)}]);&amp;#10;&amp;#10;expInfo['OS'] = window.navigator.platform;&amp;#10;expInfo['xResolution'] = screen.width;&amp;#10;expInfo['yResolution'] = screen.height;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_JS" valType="code"/>
      </CodeComponent>
      <CodeComponent name="code_Py">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="from numpy.random import permutation" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_Py" valType="code"/>
      </CodeComponent>
      <CodeComponent name="code_1">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="oldt=0&amp;#10;x_size=8.560&amp;#10;y_size=5.398&amp;#10;screen_height=0&amp;#10;&amp;#10;if win.units=='norm':&amp;#10;    x_scale=.05&amp;#10;    y_scale=.1&amp;#10;    dbase = .0001&amp;#10;    unittext=' norm units'&amp;#10;    vsize=2&amp;#10;elif win.units=='pix':&amp;#10;    x_scale=60&amp;#10;    y_scale=40&amp;#10;    dbase = .1&amp;#10;    unittext=' pixels'&amp;#10;    vsize=win.size[1]&amp;#10;else:&amp;#10;    x_scale=.05&amp;#10;    y_scale=.05&amp;#10;    dbase = .0001&amp;#10;    unittext=' height units'&amp;#10;    vsize=1&amp;#10;&amp;#10;# h = tan(degrees = 2) x (distance = 49.53)&amp;#10;height = 3.459&amp;#10;width = 3.459" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="oldt = 0;&amp;#10;x_size = 8.56;&amp;#10;y_size = 5.398;&amp;#10;screen_height = 0;&amp;#10;if ((win.units === &quot;norm&quot;)) {&amp;#10;    x_scale = 0.05;&amp;#10;    y_scale = 0.1;&amp;#10;    dbase = 0.0001;&amp;#10;    unittext = &quot; norm units&quot;;&amp;#10;    vsize = 2;&amp;#10;} else {&amp;#10;    if ((win.units === &quot;pix&quot;)) {&amp;#10;        x_scale = 60;&amp;#10;        y_scale = 40;&amp;#10;        dbase = 0.1;&amp;#10;        unittext = &quot; pixels&quot;;&amp;#10;        vsize = win.size[1];&amp;#10;    } else {&amp;#10;        x_scale = 0.05;&amp;#10;        y_scale = 0.05;&amp;#10;        dbase = 0.0001;&amp;#10;        unittext = &quot; height units&quot;;&amp;#10;        vsize = 1;&amp;#10;    }&amp;#10;}&amp;#10;height = 3.459;&amp;#10;width = 3.459;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys=event.getKeys()&amp;#10;&amp;#10;if len(keys):&amp;#10;    if t-oldt&lt;.5:&amp;#10;        dscale=5*dbase&amp;#10;        oldt=t&amp;#10;    else:&amp;#10;        dscale=dbase&amp;#10;        oldt=t&amp;#10;    if 'space' in keys:&amp;#10;        continueRoutine=False&amp;#10;    elif 'up' in keys:&amp;#10;        y_scale=round((y_scale+dscale)*10000)/10000&amp;#10;    elif 'down' in keys:&amp;#10;        y_scale=round((y_scale-dscale)*10000)/10000&amp;#10;    elif 'left' in keys:&amp;#10;        x_scale=round((x_scale-dscale)*10000)/10000&amp;#10;    elif 'right' in keys:&amp;#10;        x_scale=round((x_scale+dscale)*10000)/10000&amp;#10;    screen_height=round(vsize*10/y_scale)/10&amp;#10;    ccimage.size=[x_size*x_scale, y_size*y_scale]&amp;#10;    " valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (((t - oldt) &lt; 0.5)) {&amp;#10;        dscale = (5 * dbase);&amp;#10;        oldt = t;&amp;#10;    } else {&amp;#10;        dscale = dbase;&amp;#10;        oldt = t;&amp;#10;    }&amp;#10;    if (_pj.in_es6(&quot;space&quot;, keys)) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;up&quot;, keys)) {&amp;#10;            y_scale = (round(((y_scale + dscale) * 10000)) / 10000);&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;down&quot;, keys)) {&amp;#10;                y_scale = (round(((y_scale - dscale) * 10000)) / 10000);&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;left&quot;, keys)) {&amp;#10;                    x_scale = (round(((x_scale - dscale) * 10000)) / 10000);&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;right&quot;, keys)) {&amp;#10;                        x_scale = (round(((x_scale + dscale) * 10000)) / 10000);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    screen_height = (round(((vsize * 10) / y_scale)) / 10);&amp;#10;    ccimage.size = [(x_size * x_scale), (y_size * y_scale)];&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="thisExp.addData(&quot;X Scale&quot;, x_scale);&amp;#10;thisExp.addData(&quot;Y Scale&quot;, y_scale);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="thisExp.addData('X Scale',x_scale)&amp;#10;thisExp.addData('Y Scale',y_scale)&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_1" valType="code"/>
      </CodeComponent>
      <TextComponent name="text_top">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_top" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0.3)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Resize this image to match the size of a credit card with arrow keys" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="text_bottom">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_bottom" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -0.3)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Press Space when you’re finished" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <ImageComponent name="ccimage">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="bankcard.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="ccimage" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="constant" val="$(x_size*x_scale, y_size*y_scale)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
    </Routine>
    <Routine name="target_img">
      <CodeComponent name="code_4">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="img_pair = 0;&amp;#10;target = 0;&amp;#10;probe = 0;&amp;#10;corr = 0;&amp;#10;trialID = (trialID + 1);&amp;#10;if ((fix_switch[trialID] === 1)) {&amp;#10;    if ((fix_switch === &quot;pink&quot;)) {&amp;#10;        fix_color = fix_color_options[1];&amp;#10;    } else {&amp;#10;        fix_color = fix_color_options[0];&amp;#10;    }&amp;#10;}&amp;#10;if ((expInfo[&quot;position&quot;] === &quot;0&quot;)) {&amp;#10;    xPosition = 0;&amp;#10;} else {&amp;#10;    if ((expInfo[&quot;position&quot;] === &quot;2&quot;)) {&amp;#10;        if ((trial_order[trialID] === 1)) {&amp;#10;            sameTrialid += 1;&amp;#10;            if ((side_same[sameTrialid] === 1)) {&amp;#10;                xPosition = (- (width * x_scale));&amp;#10;                sameTrial_left_id += 1;&amp;#10;                console.log((&quot;left same ID: &quot; + sameTrial_left_id.toString()));&amp;#10;                target = paths[trialSame_left[sameTrial_left_id]];&amp;#10;                probe = paths[trialSame_left[sameTrial_left_id]];&amp;#10;                if (((((Number.parseInt(expInfo[&quot;design&quot;]) === (1 | Number.parseInt(expInfo[&quot;design&quot;]))) &amp;&amp; ((1 | Number.parseInt(expInfo[&quot;design&quot;])) === (2 | Number.parseInt(expInfo[&quot;design&quot;])))) &amp;&amp; ((2 | Number.parseInt(expInfo[&quot;design&quot;])) === (3 | Number.parseInt(expInfo[&quot;design&quot;])))) &amp;&amp; ((3 | Number.parseInt(expInfo[&quot;design&quot;])) === 4))) {&amp;#10;                    corr = &quot;f&quot;;&amp;#10;                } else {&amp;#10;                    corr = &quot;j&quot;;&amp;#10;                }&amp;#10;            } else {&amp;#10;                if ((side_same[sameTrialid] === 0)) {&amp;#10;                    xPosition = (width * x_scale);&amp;#10;                    sameTrial_right_id += 1;&amp;#10;                    console.log((&quot;right same ID: &quot; + sameTrial_right_id.toString()));&amp;#10;                    target = paths[trialSame_right[sameTrial_right_id]];&amp;#10;                    probe = paths[trialSame_right[sameTrial_right_id]];&amp;#10;                    if (((((Number.parseInt(expInfo[&quot;design&quot;]) === (1 | Number.parseInt(expInfo[&quot;design&quot;]))) &amp;&amp; ((1 | Number.parseInt(expInfo[&quot;design&quot;])) === (2 | Number.parseInt(expInfo[&quot;design&quot;])))) &amp;&amp; ((2 | Number.parseInt(expInfo[&quot;design&quot;])) === (3 | Number.parseInt(expInfo[&quot;design&quot;])))) &amp;&amp; ((3 | Number.parseInt(expInfo[&quot;design&quot;])) === 4))) {&amp;#10;                        corr = &quot;f&quot;;&amp;#10;                    } else {&amp;#10;                        corr = &quot;j&quot;;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        } else {&amp;#10;            if ((trial_order[trialID] === 0)) {&amp;#10;                diffTrialid += 1;&amp;#10;                if ((side_diff[diffTrialid] === 1)) {&amp;#10;                    xPosition = (- (width * x_scale));&amp;#10;                    diffTrial_left_id += 1;&amp;#10;                    console.log((&quot;left diff ID: &quot; + diffTrial_left_id.toString()));&amp;#10;                    img_pair = trialDiff_left[diffTrial_left[diffTrial_left_id]];&amp;#10;                    target = paths[img_pair[0]];&amp;#10;                    probe = paths[img_pair[1]];&amp;#10;                    if (((((Number.parseInt(expInfo[&quot;design&quot;]) === (1 | Number.parseInt(expInfo[&quot;design&quot;]))) &amp;&amp; ((1 | Number.parseInt(expInfo[&quot;design&quot;])) === (2 | Number.parseInt(expInfo[&quot;design&quot;])))) &amp;&amp; ((2 | Number.parseInt(expInfo[&quot;design&quot;])) === (3 | Number.parseInt(expInfo[&quot;design&quot;])))) &amp;&amp; ((3 | Number.parseInt(expInfo[&quot;design&quot;])) === 4))) {&amp;#10;                        corr = &quot;j&quot;;&amp;#10;                    } else {&amp;#10;                        corr = &quot;f&quot;;&amp;#10;                    }&amp;#10;                } else {&amp;#10;                    if ((side_diff[diffTrialid] === 0)) {&amp;#10;                        xPosition = (width * x_scale);&amp;#10;                        diffTrial_right_id += 1;&amp;#10;                        console.log((&quot;right diff ID: &quot; + diffTrial_right_id.toString()));&amp;#10;                        img_pair = trialDiff_right[diffTrial_right[diffTrial_right_id]];&amp;#10;                        target = paths[img_pair[0]];&amp;#10;                        probe = paths[img_pair[1]];&amp;#10;                        if (((((Number.parseInt(expInfo[&quot;design&quot;]) === (1 | Number.parseInt(expInfo[&quot;design&quot;]))) &amp;&amp; ((1 | Number.parseInt(expInfo[&quot;design&quot;])) === (2 | Number.parseInt(expInfo[&quot;design&quot;])))) &amp;&amp; ((2 | Number.parseInt(expInfo[&quot;design&quot;])) === (3 | Number.parseInt(expInfo[&quot;design&quot;])))) &amp;&amp; ((3 | Number.parseInt(expInfo[&quot;design&quot;])) === 4))) {&amp;#10;                            corr = &quot;j&quot;;&amp;#10;                        } else {&amp;#10;                            corr = &quot;f&quot;;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    } else {&amp;#10;        if ((expInfo[&quot;position&quot;] === &quot;1&quot;)) {&amp;#10;            xPosition = (- (width * x_scale));&amp;#10;            if ((trial_order[trialID] === 1)) {&amp;#10;                sameTrialid += 1;&amp;#10;                target = paths[trialSame[sameTrialid]];&amp;#10;                probe = paths[trialSame[sameTrialid]];&amp;#10;                if (((((Number.parseInt(expInfo[&quot;design&quot;]) === (1 | Number.parseInt(expInfo[&quot;design&quot;]))) &amp;&amp; ((1 | Number.parseInt(expInfo[&quot;design&quot;])) === (2 | Number.parseInt(expInfo[&quot;design&quot;])))) &amp;&amp; ((2 | Number.parseInt(expInfo[&quot;design&quot;])) === (3 | Number.parseInt(expInfo[&quot;design&quot;])))) &amp;&amp; ((3 | Number.parseInt(expInfo[&quot;design&quot;])) === 4))) {&amp;#10;                    corr = &quot;f&quot;;&amp;#10;                } else {&amp;#10;                    corr = &quot;j&quot;;&amp;#10;                }&amp;#10;            } else {&amp;#10;                if ((trial_order[trialID] === 0)) {&amp;#10;                    diffTrialid += 1;&amp;#10;                    img_pair = trialDiff[diffTrial[diffTrialid]];&amp;#10;                    target = paths[img_pair[0]];&amp;#10;                    probe = paths[img_pair[1]];&amp;#10;                    if (((((Number.parseInt(expInfo[&quot;design&quot;]) === (1 | Number.parseInt(expInfo[&quot;design&quot;]))) &amp;&amp; ((1 | Number.parseInt(expInfo[&quot;design&quot;])) === (2 | Number.parseInt(expInfo[&quot;design&quot;])))) &amp;&amp; ((2 | Number.parseInt(expInfo[&quot;design&quot;])) === (3 | Number.parseInt(expInfo[&quot;design&quot;])))) &amp;&amp; ((3 | Number.parseInt(expInfo[&quot;design&quot;])) === 4))) {&amp;#10;                        corr = &quot;j&quot;;&amp;#10;                    } else {&amp;#10;                        corr = &quot;f&quot;;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        } else {&amp;#10;            if ((expInfo[&quot;position&quot;] === &quot;3&quot;)) {&amp;#10;                xPosition = (width * x_scale);&amp;#10;                if ((trial_order[trialID] === 1)) {&amp;#10;                    sameTrialid += 1;&amp;#10;                    target = paths[trialSame[sameTrialid]];&amp;#10;                    probe = paths[trialSame[sameTrialid]];&amp;#10;                    if (((((Number.parseInt(expInfo[&quot;design&quot;]) === (1 | Number.parseInt(expInfo[&quot;design&quot;]))) &amp;&amp; ((1 | Number.parseInt(expInfo[&quot;design&quot;])) === (2 | Number.parseInt(expInfo[&quot;design&quot;])))) &amp;&amp; ((2 | Number.parseInt(expInfo[&quot;design&quot;])) === (3 | Number.parseInt(expInfo[&quot;design&quot;])))) &amp;&amp; ((3 | Number.parseInt(expInfo[&quot;design&quot;])) === 4))) {&amp;#10;                        corr = &quot;f&quot;;&amp;#10;                    } else {&amp;#10;                        corr = &quot;j&quot;;&amp;#10;                    }&amp;#10;                } else {&amp;#10;                    if ((trial_order[trialID] === 0)) {&amp;#10;                        diffTrialid += 1;&amp;#10;                        img_pair = trialDiff[diffTrial[diffTrialid]];&amp;#10;                        target = paths[img_pair[0]];&amp;#10;                        probe = paths[img_pair[1]];&amp;#10;                        if (((((Number.parseInt(expInfo[&quot;design&quot;]) === (1 | Number.parseInt(expInfo[&quot;design&quot;]))) &amp;&amp; ((1 | Number.parseInt(expInfo[&quot;design&quot;])) === (2 | Number.parseInt(expInfo[&quot;design&quot;])))) &amp;&amp; ((2 | Number.parseInt(expInfo[&quot;design&quot;])) === (3 | Number.parseInt(expInfo[&quot;design&quot;])))) &amp;&amp; ((3 | Number.parseInt(expInfo[&quot;design&quot;])) === 4))) {&amp;#10;                            corr = &quot;j&quot;;&amp;#10;                        } else {&amp;#10;                            corr = &quot;f&quot;;&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;thisExp.addData(&quot;fix_switches&quot;, fix_switch[trialID]);&amp;#10;thisExp.addData(&quot;side&quot;, xPosition);&amp;#10;thisExp.addData(&quot;trial_type1S0D&quot;, trial_order[trialID]);&amp;#10;thisExp.addData(&quot;target&quot;, target);&amp;#10;thisExp.addData(&quot;probe&quot;, probe);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="img_pair = 0&amp;#10;target = 0&amp;#10;probe = 0&amp;#10;corr = 0&amp;#10;trialID = trialID + 1&amp;#10;&amp;#10;if fix_switch[trialID] == 1:&amp;#10;    if fix_switch == &quot;pink&quot;:&amp;#10;        fix_color = fix_color_options[1]&amp;#10;    else:&amp;#10;        fix_color = fix_color_options[0]&amp;#10;&amp;#10;if expInfo['position'] == '0':&amp;#10;    xPosition = 0&amp;#10;elif expInfo['position'] == '2':&amp;#10;    if trial_order[trialID]==1:&amp;#10;        sameTrialid += 1&amp;#10;        if side_same[sameTrialid] == 1: #left&amp;#10;            xPosition = -(width*x_scale)&amp;#10;            sameTrial_left_id += 1&amp;#10;            print('left same ID: ' + str(sameTrial_left_id))&amp;#10;            target = paths[trialSame_left[sameTrial_left_id]]&amp;#10;            probe = paths[trialSame_left[sameTrial_left_id]]&amp;#10;            if int(expInfo['design']) == 1 | int(expInfo['design']) == 2 | int(expInfo['design']) == 3 | int(expInfo['design']) == 4:&amp;#10;                corr = 'f'&amp;#10;            else:&amp;#10;                corr = 'j'&amp;#10;        elif side_same[sameTrialid] == 0: #right&amp;#10;            xPosition = width*x_scale&amp;#10;            sameTrial_right_id += 1&amp;#10;            print('right same ID: ' + str(sameTrial_right_id))&amp;#10;            target = paths[trialSame_right[sameTrial_right_id]]&amp;#10;            probe = paths[trialSame_right[sameTrial_right_id]]&amp;#10;            if int(expInfo['design']) == 1 | int(expInfo['design']) == 2 | int(expInfo['design']) == 3 | int(expInfo['design']) == 4:&amp;#10;                corr = 'f'&amp;#10;            else:&amp;#10;                corr = 'j'&amp;#10;    elif trial_order[trialID]==0:&amp;#10;        diffTrialid += 1&amp;#10;        if side_diff[diffTrialid] == 1: #left&amp;#10;            xPosition = -(width*x_scale)&amp;#10;            diffTrial_left_id += 1&amp;#10;            print('left diff ID: ' + str(diffTrial_left_id))&amp;#10;            img_pair = trialDiff_left[diffTrial_left[diffTrial_left_id]]&amp;#10;            target = paths[img_pair[0]]&amp;#10;            probe = paths[img_pair[1]]&amp;#10;            if int(expInfo['design']) == 1 | int(expInfo['design']) == 2 | int(expInfo['design']) == 3 | int(expInfo['design']) == 4:&amp;#10;                corr = 'j'&amp;#10;            else:&amp;#10;                corr = 'f'&amp;#10;        elif side_diff[diffTrialid] == 0: #right&amp;#10;            xPosition = width*x_scale&amp;#10;            diffTrial_right_id += 1&amp;#10;            print('right diff ID: ' + str(diffTrial_right_id))&amp;#10;            img_pair = trialDiff_right[diffTrial_right[diffTrial_right_id]]&amp;#10;            target = paths[img_pair[0]]&amp;#10;            probe = paths[img_pair[1]]&amp;#10;            if int(expInfo['design']) == 1 | int(expInfo['design']) == 2 | int(expInfo['design']) == 3 | int(expInfo['design']) == 4:&amp;#10;                corr = 'j'&amp;#10;            else:&amp;#10;                corr = 'f'&amp;#10;elif expInfo['position'] == '1':&amp;#10;    xPosition = -(width*x_scale)&amp;#10;    if trial_order[trialID]==1:&amp;#10;        sameTrialid += 1&amp;#10;        target = paths[trialSame[sameTrialid]]&amp;#10;        probe = paths[trialSame[sameTrialid]]&amp;#10;        if int(expInfo['design']) == 1 | int(expInfo['design']) == 2 | int(expInfo['design']) == 3 | int(expInfo['design']) == 4:&amp;#10;            corr = 'f'&amp;#10;        else:&amp;#10;            corr = 'j'&amp;#10;    elif trial_order[trialID]==0:&amp;#10;        diffTrialid += 1&amp;#10;        img_pair = trialDiff[diffTrial[diffTrialid]]&amp;#10;        target = paths[img_pair[0]]&amp;#10;        probe = paths[img_pair[1]]&amp;#10;        if int(expInfo['design']) == 1 | int(expInfo['design']) == 2 | int(expInfo['design']) == 3 | int(expInfo['design']) == 4:&amp;#10;            corr = 'j'&amp;#10;        else:&amp;#10;            corr = 'f'&amp;#10;elif expInfo['position'] == '3':&amp;#10;    xPosition = width*x_scale&amp;#10;    if trial_order[trialID]==1:&amp;#10;        sameTrialid += 1&amp;#10;        target = paths[trialSame[sameTrialid]]&amp;#10;        probe = paths[trialSame[sameTrialid]]&amp;#10;        if int(expInfo['design']) == 1 | int(expInfo['design']) == 2 | int(expInfo['design']) == 3 | int(expInfo['design']) == 4:&amp;#10;            corr = 'f'&amp;#10;        else:&amp;#10;            corr = 'j'&amp;#10;    elif trial_order[trialID]==0:&amp;#10;        diffTrialid += 1&amp;#10;        img_pair = trialDiff[diffTrial[diffTrialid]]&amp;#10;        target = paths[img_pair[0]]&amp;#10;        probe = paths[img_pair[1]]&amp;#10;        if int(expInfo['design']) == 1 | int(expInfo['design']) == 2 | int(expInfo['design']) == 3 | int(expInfo['design']) == 4:&amp;#10;            corr = 'j'&amp;#10;        else:&amp;#10;            corr = 'f'&amp;#10;&amp;#10;thisExp.addData('fix_switches', fix_switch[trialID])&amp;#10;thisExp.addData('side', xPosition)&amp;#10;thisExp.addData('trial_type1S0D',trial_order[trialID])&amp;#10;thisExp.addData('target',target)&amp;#10;thisExp.addData('probe',probe)" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_4" valType="code"/>
      </CodeComponent>
      <TextComponent name="text_4">
        <Param name="color" updates="set every repeat" val="$fix_color" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <ImageComponent name="target_image">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$target" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="target_image" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$(xPosition, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="set every repeat" val="$(width*x_scale,height*y_scale)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_3">
        <Param name="allowedKeys" updates="constant" val="'space'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_3" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.2" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="probe_img">
      <CodeComponent name="code_5">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_5" valType="code"/>
      </CodeComponent>
      <TextComponent name="text_5">
        <Param name="color" updates="set every repeat" val="$fix_color" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <ImageComponent name="probe_image">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$probe" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="probe_image" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="$(xPosition, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="set every repeat" val="$(width*x_scale,height*y_scale)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_5">
        <Param name="allowedKeys" updates="constant" val="'space'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_5" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.2" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="startInstruct">
      <CodeComponent name="code_2">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="fix_color_options = [&quot;pink&quot;,&quot;orange&quot;];&amp;#10;&amp;#10;if expInfo['design'] == '1':&amp;#10;    design_file = 'Designs/design1.csv'&amp;#10;elif expInfo['design'] == '2':&amp;#10;    design_file = 'Designs/design2.csv'&amp;#10;elif expInfo['design'] == '3':&amp;#10;    design_file = 'Designs/design3.csv'&amp;#10;elif expInfo['design'] == '4':&amp;#10;    design_file = 'Designs/design4.csv'&amp;#10;elif expInfo['design'] == '5':&amp;#10;    design_file = 'Designs/design5.csv'&amp;#10;elif expInfo['design'] == '6':&amp;#10;    design_file = 'Designs/design6.csv'&amp;#10;elif expInfo['design'] == '7':&amp;#10;    design_file = 'Designs/design7.csv'&amp;#10;elif expInfo['design'] == '8':&amp;#10;    design_file = 'Designs/design8.csv'" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="fix_color_options = [&quot;pink&quot;, &quot;orange&quot;];&amp;#10;if ((expInfo[&quot;design&quot;] === &quot;1&quot;)) {&amp;#10;    design_file = &quot;Designs/design1.csv&quot;;&amp;#10;} else {&amp;#10;    if ((expInfo[&quot;design&quot;] === &quot;2&quot;)) {&amp;#10;        design_file = &quot;Designs/design2.csv&quot;;&amp;#10;    } else {&amp;#10;        if ((expInfo[&quot;design&quot;] === &quot;3&quot;)) {&amp;#10;            design_file = &quot;Designs/design3.csv&quot;;&amp;#10;        } else {&amp;#10;            if ((expInfo[&quot;design&quot;] === &quot;4&quot;)) {&amp;#10;                design_file = &quot;Designs/design4.csv&quot;;&amp;#10;            } else {&amp;#10;                if ((expInfo[&quot;design&quot;] === &quot;5&quot;)) {&amp;#10;                    design_file = &quot;Designs/design5.csv&quot;;&amp;#10;                } else {&amp;#10;                    if ((expInfo[&quot;design&quot;] === &quot;6&quot;)) {&amp;#10;                        design_file = &quot;Designs/design6.csv&quot;;&amp;#10;                    } else {&amp;#10;                        if ((expInfo[&quot;design&quot;] === &quot;7&quot;)) {&amp;#10;                            design_file = &quot;Designs/design7.csv&quot;;&amp;#10;                        } else {&amp;#10;                            if ((expInfo[&quot;design&quot;] === &quot;8&quot;)) {&amp;#10;                                design_file = &quot;Designs/design8.csv&quot;;&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_2" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="trial_resp">
      <TextComponent name="text_2">
        <Param name="color" updates="set every repeat" val="$fix_color" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp">
        <Param name="allowedKeys" updates="constant" val="'f','j'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$corr" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <KeyboardComponent name="key_resp_6">
        <Param name="allowedKeys" updates="constant" val="'space'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_6" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="ISI_fix">
      <TextComponent name="text">
        <Param name="color" updates="set every repeat" val="$fix_color" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.3" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_4">
        <Param name="allowedKeys" updates="constant" val="'space'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_4" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.3" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="instrBlock">
      <CodeComponent name="code_3">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="        // add-on: list(s: string): string[]&amp;#10;        function list(s) {&amp;#10;            // if s is a string, we return a list of its characters&amp;#10;            if (typeof s === 'string')&amp;#10;                return s.split('');&amp;#10;            else&amp;#10;                // otherwise we return s:&amp;#10;                return s;&amp;#10;        }&amp;#10;function shuffle_array(array) {&amp;#10;    for (let i = array.length - 1; i &gt; 0; i--) {&amp;#10;        let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i&amp;#10;&amp;#10;            // swap elements array[i] and array[j]&amp;#10;            // we use &quot;destructuring assignment&quot; syntax to achieve that&amp;#10;            // you'll find more details about that syntax in later chapters&amp;#10;            // same can be written as:&amp;#10;            // let t = array[i]; array[i] = array[j]; array[j] = t&amp;#10;        [array[i], array[j]] = [array[j], array[i]];&amp;#10;    }&amp;#10;    return array&amp;#10;}&amp;#10;&amp;#10;function divide_subPoint1(array, divisor) {&amp;#10;    let array_divided = array.map(function(element) {&amp;#10;        return element/divisor - 0.1;&amp;#10;    });&amp;#10;    return array_divided&amp;#10;}&amp;#10;&amp;#10;function round_array(array) {&amp;#10;    array = array.map(function(each_element){&amp;#10;        return Math.round(each_element);&amp;#10;    }); &amp;#10;    return array&amp;#10;}&amp;#10;&amp;#10;if ((Block_type === &quot;conf_face&quot;)) {&amp;#10;    paths = [&quot;Stimuli/edmd.png&quot;, &quot;Stimuli/eimd.png&quot;, &quot;Stimuli/eomu.png&quot;, &quot;Stimuli/eumu.png&quot;];&amp;#10;    if (((((Number.parseInt(expInfo[&quot;design&quot;]) === (1 | Number.parseInt(expInfo[&quot;design&quot;]))) &amp;&amp; ((1 | Number.parseInt(expInfo[&quot;design&quot;])) === (2 | Number.parseInt(expInfo[&quot;design&quot;])))) &amp;&amp; ((2 | Number.parseInt(expInfo[&quot;design&quot;])) === (3 | Number.parseInt(expInfo[&quot;design&quot;])))) &amp;&amp; ((3 | Number.parseInt(expInfo[&quot;design&quot;])) === 4))) {&amp;#10;        instruction_img = &quot;Designs/instructions_face_1234.png&quot;;&amp;#10;    } else {&amp;#10;        instruction_img = &quot;Designs/instructions_face_5678.png&quot;;&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((Block_type === &quot;conf_haus&quot;)) {&amp;#10;        paths = [&quot;Stimuli/H-8sim0.png&quot;, &quot;Stimuli/H-8sim1.png&quot;, &quot;Stimuli/H-8sim2.png&quot;, &quot;Stimuli/H-8sim3.png&quot;];&amp;#10;        if (((((Number.parseInt(expInfo[&quot;design&quot;]) === (1 | Number.parseInt(expInfo[&quot;design&quot;]))) &amp;&amp; ((1 | Number.parseInt(expInfo[&quot;design&quot;])) === (2 | Number.parseInt(expInfo[&quot;design&quot;])))) &amp;&amp; ((2 | Number.parseInt(expInfo[&quot;design&quot;])) === (3 | Number.parseInt(expInfo[&quot;design&quot;])))) &amp;&amp; ((3 | Number.parseInt(expInfo[&quot;design&quot;])) === 4))) {&amp;#10;            instruction_img = &quot;Designs/instructions_haus_1234.png&quot;;&amp;#10;        } else {&amp;#10;            instruction_img = &quot;Designs/instructions_haus_5678.png&quot;;&amp;#10;        }&amp;#10;    } else {&amp;#10;        if ((Block_type === &quot;feat_face&quot;)) {&amp;#10;            paths = [&quot;Stimuli/f15.png&quot;, &quot;Stimuli/f24.png&quot;, &quot;Stimuli/f131.png&quot;, &quot;Stimuli/f142.png&quot;];&amp;#10;            if (((((Number.parseInt(expInfo[&quot;design&quot;]) === (1 | Number.parseInt(expInfo[&quot;design&quot;]))) &amp;&amp; ((1 | Number.parseInt(expInfo[&quot;design&quot;])) === (2 | Number.parseInt(expInfo[&quot;design&quot;])))) &amp;&amp; ((2 | Number.parseInt(expInfo[&quot;design&quot;])) === (3 | Number.parseInt(expInfo[&quot;design&quot;])))) &amp;&amp; ((3 | Number.parseInt(expInfo[&quot;design&quot;])) === 4))) {&amp;#10;                instruction_img = &quot;Designs/instructions_face_1234.png&quot;;&amp;#10;            } else {&amp;#10;                instruction_img = &quot;Designs/instructions_face_5678.png&quot;;&amp;#10;            }&amp;#10;        } else {&amp;#10;            if ((Block_type === &quot;feat_haus&quot;)) {&amp;#10;                paths = [&quot;Stimuli/H5sim0.png&quot;, &quot;Stimuli/H6sim0.png&quot;, &quot;Stimuli/H7sim0.png&quot;, &quot;Stimuli/H8sim0.png&quot;];&amp;#10;                if (((((Number.parseInt(expInfo[&quot;design&quot;]) === (1 | Number.parseInt(expInfo[&quot;design&quot;]))) &amp;&amp; ((1 | Number.parseInt(expInfo[&quot;design&quot;])) === (2 | Number.parseInt(expInfo[&quot;design&quot;])))) &amp;&amp; ((2 | Number.parseInt(expInfo[&quot;design&quot;])) === (3 | Number.parseInt(expInfo[&quot;design&quot;])))) &amp;&amp; ((3 | Number.parseInt(expInfo[&quot;design&quot;])) === 4))) {&amp;#10;                    instruction_img = &quot;Designs/instructions_haus_1234.png&quot;;&amp;#10;                } else {&amp;#10;                    instruction_img = &quot;Designs/instructions_haus_5678.png&quot;;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;&amp;#10;sameTrialid = -1;&amp;#10;diffTrialid = -1;&amp;#10;sameTrial_left_id = -1;&amp;#10;diffTrial_left_id = -1;&amp;#10;sameTrial_right_id = -1;&amp;#10;diffTrial_right_id = -1;&amp;#10;trialID = -1;&amp;#10;rand_start = shuffle_array([0,1]);&amp;#10;fix_color = fix_color_options[rand_start[0]];&amp;#10;&amp;#10;if ((expInfo[&quot;position&quot;] === &quot;2&quot;)) {&amp;#10;    numTrials = 48;&amp;#10;    trial_order = [shuffle_array([1, 2, 3, 4, 5, 6]), shuffle_array([1, 2, 3, 4, 5, 6]), shuffle_array([1, 2, 3, 4, 5, 6]), shuffle_array([1, 2, 3, 4, 5, 6]),shuffle_array([1, 2, 3, 4, 5, 6]), shuffle_array([1, 2, 3, 4, 5, 6]), shuffle_array([1, 2, 3, 4, 5, 6]), shuffle_array([1, 2, 3, 4, 5, 6])].flat();&amp;#10;    trial_order = round_array(divide_subPoint1(trial_order,6))&amp;#10;    trialSame_left = [shuffle_array([0, 1, 2, 3]), shuffle_array([0, 1, 2, 3]), shuffle_array([0, 1, 2, 3])].flat();&amp;#10;    trialDiff_left = [[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [1, 0], [2, 3], [2, 0], [2, 1], [3, 0], [3, 1], [3, 2]];&amp;#10;    diffTrial_left = shuffle_array(list([...Array(12).keys()]));&amp;#10;    trialSame_right = [shuffle_array([0, 1, 2, 3]), shuffle_array([0, 1, 2, 3]), shuffle_array([0, 1, 2, 3])].flat();&amp;#10;    trialDiff_right = [[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [1, 0], [2, 3], [2, 0], [2, 1], [3, 0], [3, 1], [3, 2]];&amp;#10;    diffTrial_right = shuffle_array(list([...Array(12).keys()]));&amp;#10;    fix_switch = [0,0,shuffle_array([1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0]),0,0].flat();&amp;#10;    side_same = shuffle_array([0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]);&amp;#10;    side_diff = shuffle_array([0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]);&amp;#10;    if ((expInfo[&quot;position&quot;] === &quot;1&quot;)) {&amp;#10;        numTrials = 24;&amp;#10;        trial_order = [shuffle_array([1, 2, 3, 4, 5, 6]), shuffle_array([1, 2, 3, 4, 5, 6]), shuffle_array([1, 2, 3, 4, 5, 6]), shuffle_array([1, 2, 3, 4, 5, 6])].flat();&amp;#10;        trial_order = round_array(divide_subPoint1(trial_order,6))&amp;#10;        trialSame = [shuffle_array([0, 1, 2, 3]), shuffle_array([0, 1, 2, 3]), shuffle_array([0, 1, 2, 3])].flat();&amp;#10;        trialDiff = [[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [1, 0], [2, 3], [2, 0], [2, 1], [3, 0], [3, 1], [3, 2]];&amp;#10;        diffTrial = shuffle_array(list([...Array(12).keys()]));&amp;#10;        fix_switch = [0,0,shuffle_array([1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),0,0].flat();&amp;#10;//        side = shuffle_array([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]);&amp;#10;    } else {&amp;#10;        if ((expInfo[&quot;position&quot;] === &quot;3&quot;)) {&amp;#10;            numTrials = 24;&amp;#10;            trial_order = [shuffle_array([1, 2, 3, 4, 5, 6]), shuffle_array([1, 2, 3, 4, 5, 6]), shuffle_array([1, 2, 3, 4, 5, 6]), shuffle_array([1, 2, 3, 4, 5, 6])].flat();&amp;#10;            trial_order = round_array(divide_subPoint1(trial_order,6))&amp;#10;            trialSame = [shuffle_array([0, 1, 2, 3]), shuffle_array([0, 1, 2, 3]), shuffle_array([0, 1, 2, 3])].flat();&amp;#10;            trialDiff = [[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [1, 0], [2, 3], [2, 0], [2, 1], [3, 0], [3, 1], [3, 2]];&amp;#10;            diffTrial = shuffle_array(list([...Array(12).keys()]));&amp;#10;            fix_switch = [0,0,shuffle_array([1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]),0,0].flat();&amp;#10;//            side = shuffle_array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);&amp;#10;        } &amp;#10;    }&amp;#10;}&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if Block_type == 'conf_face':&amp;#10;    paths = ['Stimuli/edmd.png', 'Stimuli/eimd.png', 'Stimuli/eomu.png', 'Stimuli/eumu.png']&amp;#10;    if int(expInfo['design']) == 1 | int(expInfo['design']) == 2 | int(expInfo['design']) == 3 | int(expInfo['design']) == 4:&amp;#10;        instruction_img = 'Designs/instructions_face_1234.png'&amp;#10;    else:&amp;#10;        instruction_img = 'Designs/instructions_face_5678.png'&amp;#10;elif Block_type == 'conf_haus':&amp;#10;    paths =  ['Stimuli/H-8sim0.png', 'Stimuli/H-8sim1.png', 'Stimuli/H-8sim2.png', 'Stimuli/H-8sim3.png']&amp;#10;    if int(expInfo['design']) == 1 | int(expInfo['design']) == 2 | int(expInfo['design']) == 3 | int(expInfo['design']) == 4:&amp;#10;        instruction_img = 'Designs/instructions_haus_1234.png'&amp;#10;    else:&amp;#10;        instruction_img = 'Designs/instructions_haus_5678.png'&amp;#10;elif Block_type == 'feat_face':&amp;#10;    paths =  ['Stimuli/f15.png', 'Stimuli/f24.png', 'Stimuli/f131.png', 'Stimuli/f142.png']&amp;#10;    if int(expInfo['design']) == 1 | int(expInfo['design']) == 2 | int(expInfo['design']) == 3 | int(expInfo['design']) == 4:&amp;#10;        instruction_img = 'Designs/instructions_face_1234.png'&amp;#10;    else:&amp;#10;        instruction_img = 'Designs/instructions_face_5678.png'&amp;#10;elif Block_type == 'feat_haus':&amp;#10;    paths = ['Stimuli/H5sim0.png', 'Stimuli/H6sim0.png', 'Stimuli/H7sim0.png', 'Stimuli/H8sim0.png']&amp;#10;    if int(expInfo['design']) == 1 | int(expInfo['design']) == 2 | int(expInfo['design']) == 3 | int(expInfo['design']) == 4:&amp;#10;        instruction_img = 'Designs/instructions_haus_1234.png'&amp;#10;    else:&amp;#10;        instruction_img = 'Designs/instructions_haus_5678.png'&amp;#10;&amp;#10;sameTrialid = -1&amp;#10;diffTrialid = -1&amp;#10;sameTrial_left_id = -1&amp;#10;diffTrial_left_id = -1&amp;#10;sameTrial_right_id = -1&amp;#10;diffTrial_right_id = -1&amp;#10;trialID = -1;&amp;#10;rand_start = [0,1]&amp;#10;shuffle(rand_start)&amp;#10;fix_color = fix_color_options[rand_start[0]]&amp;#10;&amp;#10;if expInfo['position'] == '2':&amp;#10;    trial_order = np.concatenate((permutation([1, 2, 3, 4, 5, 6]),permutation([1, 2, 3, 4, 5, 6]),permutation([1, 2, 3, 4, 5, 6]),permutation([1, 2, 3, 4, 5, 6]),permutation([1, 2, 3, 4, 5, 6]),permutation([1, 2, 3, 4, 5, 6]),permutation([1, 2, 3, 4, 5, 6]),permutation([1, 2, 3, 4, 5, 6])))&amp;#10;    trial_order = np.round(trial_order / 6 - 0.1)&amp;#10;    trialSame_left = np.concatenate((permutation([0, 1, 2, 3]),permutation([0, 1, 2, 3]),permutation([0, 1, 2, 3])))&amp;#10;    trialDiff_left = np.array([(0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (1, 0), (2, 3), (2, 0), (2, 1),(3, 0), (3, 1), (3, 2)])&amp;#10;    trialSame_right = np.concatenate((permutation([0, 1, 2, 3]),permutation([0, 1, 2, 3]),permutation([0, 1, 2, 3])))&amp;#10;    trialDiff_right = np.array([(0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (1, 0), (2, 3), (2, 0), (2, 1),(3, 0), (3, 1), (3, 2)])&amp;#10;    diffTrial_left = list(range(12))&amp;#10;    shuffle(diffTrial_left)&amp;#10;    diffTrial_right = list(range(12))&amp;#10;    shuffle(diffTrial_right)&amp;#10;    numTrials = 48&amp;#10;    fixs_shuffled = [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0]&amp;#10;    shuffle(fixs_shuffled)&amp;#10;    fix_switch = [0,0]+fixs_shuffled+[0,0]&amp;#10;    side_same = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]&amp;#10;    side_diff = [0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]&amp;#10;    shuffle(side_same)&amp;#10;    shuffle(side_diff)&amp;#10;elif expInfo['position'] == '1':&amp;#10;    trial_order = np.concatenate((permutation([1, 2, 3, 4, 5, 6]),permutation([1, 2, 3, 4, 5, 6]),permutation([1, 2, 3, 4, 5, 6]),permutation([1, 2, 3, 4, 5, 6])))&amp;#10;    trial_order = np.round(trial_order / 6 - 0.1)&amp;#10;    trialSame = np.concatenate((permutation([0, 1, 2, 3]),permutation([0, 1, 2, 3]),permutation([0, 1, 2, 3])))&amp;#10;    trialDiff = np.array([(0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (1, 0), (2, 3), (2, 0), (2, 1),(3, 0), (3, 1), (3, 2)])&amp;#10;    diffTrial = list(range(12))&amp;#10;    shuffle(diffTrial)&amp;#10;    numTrials = 24&amp;#10;    fixs_shuffled = [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]&amp;#10;    shuffle(fixs_shuffled)&amp;#10;    fix_switch = [0,0]+fixs_shuffled+[0,0]&amp;#10;#    side = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]&amp;#10;elif expInfo['position'] == '3':&amp;#10;    trial_order = np.concatenate((permutation([1, 2, 3, 4, 5, 6]),permutation([1, 2, 3, 4, 5, 6]),permutation([1, 2, 3, 4, 5, 6]),permutation([1, 2, 3, 4, 5, 6])))&amp;#10;    trial_order = np.round(trial_order / 6 - 0.1)&amp;#10;    trialSame = np.concatenate((permutation([0, 1, 2, 3]),permutation([0, 1, 2, 3]),permutation([0, 1, 2, 3])))&amp;#10;    trialDiff = np.array([(0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (1, 0), (2, 3), (2, 0), (2, 1),(3, 0), (3, 1), (3, 2)])&amp;#10;    diffTrial = list(range(12))&amp;#10;    shuffle(diffTrial)&amp;#10;    numTrials = 24&amp;#10;    fixs_shuffled = [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]&amp;#10;    shuffle(fixs_shuffled)&amp;#10;    fix_switch = [0,0]+fixs_shuffled+[0,0]&amp;#10;#    side = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_3" valType="code"/>
      </CodeComponent>
      <ImageComponent name="instructions_image">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="set every repeat" val="$instruction_img" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="instructions_image" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="constant" val="(0.75*1.5, 0.75)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="512" valType="code"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_2">
        <Param name="allowedKeys" updates="constant" val="'space'," valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="1" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="EndScreen">
      <TextComponent name="allDone">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="allDone" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="You are all done. Thank you!" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="screen_scale"/>
    <Routine name="startInstruct"/>
    <LoopInitiator loopType="TrialHandler" name="blocks">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$design_file" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="blocks" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="instrBlock"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="$numTrials" valType="code"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="target_img"/>
    <Routine name="ISI_fix"/>
    <Routine name="probe_img"/>
    <Routine name="trial_resp"/>
    <LoopTerminator name="trials"/>
    <LoopTerminator name="blocks"/>
    <Routine name="EndScreen"/>
  </Flow>
</PsychoPy2experiment>
